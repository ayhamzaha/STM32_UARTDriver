
nucleo_UART_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b50  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002d20  08002d20  00003d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d88  08002d88  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002d88  08002d88  00003d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d90  08002d90  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d90  08002d90  00003d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d94  08002d94  00003d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002d98  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  08002e00  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08002e00  000042b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001113e  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219d  00000000  00000000  000151d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00008bd8  00000000  00000000  00017373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  0001ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f3  00000000  00000000  00020c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b79  00000000  00000000  00021643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c54  00000000  00000000  000441bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2a5f  00000000  00000000  00057e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a86f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029ec  00000000  00000000  0012a8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0012d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002d08 	.word	0x08002d08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08002d08 	.word	0x08002d08

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a0:	b530      	push	{r4, r5, lr}
 80005a2:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	2400      	movs	r4, #0
 80005a6:	9405      	str	r4, [sp, #20]
 80005a8:	9406      	str	r4, [sp, #24]
 80005aa:	9407      	str	r4, [sp, #28]
 80005ac:	9408      	str	r4, [sp, #32]
 80005ae:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b0:	9401      	str	r4, [sp, #4]
 80005b2:	4b22      	ldr	r3, [pc, #136]	@ (800063c <MX_GPIO_Init+0x9c>)
 80005b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b6:	f042 0204 	orr.w	r2, r2, #4
 80005ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80005bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005be:	f002 0204 	and.w	r2, r2, #4
 80005c2:	9201      	str	r2, [sp, #4]
 80005c4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	9402      	str	r4, [sp, #8]
 80005c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80005ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80005d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005d2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005d6:	9202      	str	r2, [sp, #8]
 80005d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	9403      	str	r4, [sp, #12]
 80005dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005de:	f042 0201 	orr.w	r2, r2, #1
 80005e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005e6:	f002 0201 	and.w	r2, r2, #1
 80005ea:	9203      	str	r2, [sp, #12]
 80005ec:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	9404      	str	r4, [sp, #16]
 80005f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005f2:	f042 0202 	orr.w	r2, r2, #2
 80005f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	9304      	str	r3, [sp, #16]
 8000600:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000602:	4d0f      	ldr	r5, [pc, #60]	@ (8000640 <MX_GPIO_Init+0xa0>)
 8000604:	4622      	mov	r2, r4
 8000606:	2120      	movs	r1, #32
 8000608:	4628      	mov	r0, r5
 800060a:	f000 fc29 	bl	8000e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800060e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000612:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000614:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000618:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800061c:	a905      	add	r1, sp, #20
 800061e:	4809      	ldr	r0, [pc, #36]	@ (8000644 <MX_GPIO_Init+0xa4>)
 8000620:	f000 fb2e 	bl	8000c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000624:	2320      	movs	r3, #32
 8000626:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000630:	a905      	add	r1, sp, #20
 8000632:	4628      	mov	r0, r5
 8000634:	f000 fb24 	bl	8000c80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000638:	b00b      	add	sp, #44	@ 0x2c
 800063a:	bd30      	pop	{r4, r5, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000
 8000644:	40020800 	.word	0x40020800

08000648 <_write>:
  if (fd == 1 || fd == 2) {
 8000648:	3801      	subs	r0, #1
 800064a:	2801      	cmp	r0, #1
 800064c:	d80a      	bhi.n	8000664 <_write+0x1c>
int _write(int fd, char* ptr, int len) {
 800064e:	b510      	push	{r4, lr}
 8000650:	4614      	mov	r4, r2
    hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000652:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000656:	b292      	uxth	r2, r2
 8000658:	4805      	ldr	r0, [pc, #20]	@ (8000670 <_write+0x28>)
 800065a:	f001 fbbe 	bl	8001dda <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
 800065e:	b920      	cbnz	r0, 800066a <_write+0x22>
      return len;
 8000660:	4620      	mov	r0, r4
}
 8000662:	bd10      	pop	{r4, pc}
  return -1;
 8000664:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000668:	4770      	bx	lr
      return -1;
 800066a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800066e:	e7f8      	b.n	8000662 <_write+0x1a>
 8000670:	20000088 	.word	0x20000088

08000674 <HAL_TIM_PeriodElapsedCallback>:
	++ding_flag;
 8000674:	4a02      	ldr	r2, [pc, #8]	@ (8000680 <HAL_TIM_PeriodElapsedCallback+0xc>)
 8000676:	7813      	ldrb	r3, [r2, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	7013      	strb	r3, [r2, #0]
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000084 	.word	0x20000084

08000684 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000686:	e7fe      	b.n	8000686 <Error_Handler+0x2>

08000688 <MX_USART2_UART_Init>:
{
 8000688:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800068a:	480a      	ldr	r0, [pc, #40]	@ (80006b4 <MX_USART2_UART_Init+0x2c>)
 800068c:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <MX_USART2_UART_Init+0x30>)
 800068e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000690:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000694:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	2300      	movs	r3, #0
 8000698:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800069a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069e:	220c      	movs	r2, #12
 80006a0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a6:	f001 fb68 	bl	8001d7a <HAL_UART_Init>
 80006aa:	b900      	cbnz	r0, 80006ae <MX_USART2_UART_Init+0x26>
}
 80006ac:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006ae:	f7ff ffe9 	bl	8000684 <Error_Handler>
 80006b2:	bf00      	nop
 80006b4:	20000088 	.word	0x20000088
 80006b8:	40004400 	.word	0x40004400

080006bc <MX_USART1_UART_Init>:
{
 80006bc:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80006be:	480a      	ldr	r0, [pc, #40]	@ (80006e8 <MX_USART1_UART_Init+0x2c>)
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <MX_USART1_UART_Init+0x30>)
 80006c2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80006c4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80006c8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	2300      	movs	r3, #0
 80006cc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006ce:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d2:	220c      	movs	r2, #12
 80006d4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006da:	f001 fb4e 	bl	8001d7a <HAL_UART_Init>
 80006de:	b900      	cbnz	r0, 80006e2 <MX_USART1_UART_Init+0x26>
}
 80006e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006e2:	f7ff ffcf 	bl	8000684 <Error_Handler>
 80006e6:	bf00      	nop
 80006e8:	200000d0 	.word	0x200000d0
 80006ec:	40011000 	.word	0x40011000

080006f0 <MX_TIM2_Init>:
{
 80006f0:	b500      	push	{lr}
 80006f2:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f4:	2300      	movs	r3, #0
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	9303      	str	r3, [sp, #12]
 80006fa:	9304      	str	r3, [sp, #16]
 80006fc:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 8000702:	4814      	ldr	r0, [pc, #80]	@ (8000754 <MX_TIM2_Init+0x64>)
 8000704:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000708:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 9999;
 800070a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800070e:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 17999;
 8000712:	f244 624f 	movw	r2, #17999	@ 0x464f
 8000716:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000718:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800071c:	f001 f934 	bl	8001988 <HAL_TIM_Base_Init>
 8000720:	b990      	cbnz	r0, 8000748 <MX_TIM2_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000726:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000728:	a902      	add	r1, sp, #8
 800072a:	480a      	ldr	r0, [pc, #40]	@ (8000754 <MX_TIM2_Init+0x64>)
 800072c:	f001 f965 	bl	80019fa <HAL_TIM_ConfigClockSource>
 8000730:	b960      	cbnz	r0, 800074c <MX_TIM2_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000736:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000738:	4669      	mov	r1, sp
 800073a:	4806      	ldr	r0, [pc, #24]	@ (8000754 <MX_TIM2_Init+0x64>)
 800073c:	f001 f9dc 	bl	8001af8 <HAL_TIMEx_MasterConfigSynchronization>
 8000740:	b930      	cbnz	r0, 8000750 <MX_TIM2_Init+0x60>
}
 8000742:	b007      	add	sp, #28
 8000744:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000748:	f7ff ff9c 	bl	8000684 <Error_Handler>
    Error_Handler();
 800074c:	f7ff ff9a 	bl	8000684 <Error_Handler>
    Error_Handler();
 8000750:	f7ff ff98 	bl	8000684 <Error_Handler>
 8000754:	20000118 	.word	0x20000118

08000758 <SystemClock_Config>:
{
 8000758:	b500      	push	{lr}
 800075a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075c:	2234      	movs	r2, #52	@ 0x34
 800075e:	2100      	movs	r1, #0
 8000760:	a807      	add	r0, sp, #28
 8000762:	f001 fcb8 	bl	80020d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000766:	2300      	movs	r3, #0
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	9303      	str	r3, [sp, #12]
 800076c:	9304      	str	r3, [sp, #16]
 800076e:	9305      	str	r3, [sp, #20]
 8000770:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	4a23      	ldr	r2, [pc, #140]	@ (8000804 <SystemClock_Config+0xac>)
 8000776:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000778:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800077c:	6411      	str	r1, [r2, #64]	@ 0x40
 800077e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000780:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000784:	9200      	str	r2, [sp, #0]
 8000786:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <SystemClock_Config+0xb0>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079e:	2301      	movs	r3, #1
 80007a0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007a6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80007b0:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b2:	2204      	movs	r2, #4
 80007b4:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007b6:	22b4      	movs	r2, #180	@ 0xb4
 80007b8:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ba:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007bc:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007be:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	a807      	add	r0, sp, #28
 80007c2:	f000 fd2f 	bl	8001224 <HAL_RCC_OscConfig>
 80007c6:	b9b0      	cbnz	r0, 80007f6 <SystemClock_Config+0x9e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007c8:	f000 fb50 	bl	8000e6c <HAL_PWREx_EnableOverDrive>
 80007cc:	b9a8      	cbnz	r0, 80007fa <SystemClock_Config+0xa2>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2302      	movs	r3, #2
 80007d4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007de:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e6:	2105      	movs	r1, #5
 80007e8:	a802      	add	r0, sp, #8
 80007ea:	f000 fb7d 	bl	8000ee8 <HAL_RCC_ClockConfig>
 80007ee:	b930      	cbnz	r0, 80007fe <SystemClock_Config+0xa6>
}
 80007f0:	b015      	add	sp, #84	@ 0x54
 80007f2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80007f6:	f7ff ff45 	bl	8000684 <Error_Handler>
    Error_Handler();
 80007fa:	f7ff ff43 	bl	8000684 <Error_Handler>
    Error_Handler();
 80007fe:	f7ff ff41 	bl	8000684 <Error_Handler>
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <main>:
{
 800080c:	b530      	push	{r4, r5, lr}
 800080e:	b085      	sub	sp, #20
  HAL_Init();
 8000810:	f000 f98e 	bl	8000b30 <HAL_Init>
  SystemClock_Config();
 8000814:	f7ff ffa0 	bl	8000758 <SystemClock_Config>
  MX_GPIO_Init();
 8000818:	f7ff fec2 	bl	80005a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800081c:	f7ff ff34 	bl	8000688 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000820:	f7ff ff4c 	bl	80006bc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000824:	f7ff ff64 	bl	80006f0 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000828:	4814      	ldr	r0, [pc, #80]	@ (800087c <main+0x70>)
 800082a:	f000 ff4d 	bl	80016c8 <HAL_TIM_Base_Start_IT>
  uint8_t arr[] = {'H','e','l','l','o',' ','w','o','r','l','d','\n'};
 800082e:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <main+0x74>)
 8000830:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000834:	ab04      	add	r3, sp, #16
 8000836:	e903 0007 	stmdb	r3, {r0, r1, r2}
  uint32_t now = 0, next_tick = TICK_DELAY;
 800083a:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
	  now = HAL_GetTick();
 800083e:	f000 f99d 	bl	8000b7c <HAL_GetTick>
 8000842:	4604      	mov	r4, r0
	  if (now >= next_tick){
 8000844:	4285      	cmp	r5, r0
 8000846:	d90e      	bls.n	8000866 <main+0x5a>
	  if (ding_flag){
 8000848:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <main+0x78>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0f6      	beq.n	800083e <main+0x32>
		  HAL_UART_Transmit(&huart1,arr, sizeof(arr), 1000);
 8000850:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000854:	220c      	movs	r2, #12
 8000856:	a901      	add	r1, sp, #4
 8000858:	480b      	ldr	r0, [pc, #44]	@ (8000888 <main+0x7c>)
 800085a:	f001 fabe 	bl	8001dda <HAL_UART_Transmit>
		  ding_flag = 0;
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <main+0x78>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	e7eb      	b.n	800083e <main+0x32>
		  printf("Tick %lu\n",now/1000);
 8000866:	4909      	ldr	r1, [pc, #36]	@ (800088c <main+0x80>)
 8000868:	fba1 3100 	umull	r3, r1, r1, r0
 800086c:	0989      	lsrs	r1, r1, #6
 800086e:	4808      	ldr	r0, [pc, #32]	@ (8000890 <main+0x84>)
 8000870:	f001 fbdc 	bl	800202c <iprintf>
		  next_tick = now + TICK_DELAY;
 8000874:	f504 757a 	add.w	r5, r4, #1000	@ 0x3e8
 8000878:	e7e6      	b.n	8000848 <main+0x3c>
 800087a:	bf00      	nop
 800087c:	20000118 	.word	0x20000118
 8000880:	08002d2c 	.word	0x08002d2c
 8000884:	20000084 	.word	0x20000084
 8000888:	200000d0 	.word	0x200000d0
 800088c:	10624dd3 	.word	0x10624dd3
 8000890:	08002d20 	.word	0x08002d20

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b500      	push	{lr}
 8000896:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000898:	2100      	movs	r1, #0
 800089a:	9100      	str	r1, [sp, #0]
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <HAL_MspInit+0x3c>)
 800089e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80008a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80008a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008a8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80008ac:	9200      	str	r2, [sp, #0]
 80008ae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b0:	9101      	str	r1, [sp, #4]
 80008b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008b4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80008b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008c4:	2007      	movs	r0, #7
 80008c6:	f000 f9a1 	bl	8000c0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	b003      	add	sp, #12
 80008cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80008d4:	6803      	ldr	r3, [r0, #0]
 80008d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008da:	d000      	beq.n	80008de <HAL_TIM_Base_MspInit+0xa>
 80008dc:	4770      	bx	lr
{
 80008de:	b500      	push	{lr}
 80008e0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008e2:	2100      	movs	r1, #0
 80008e4:	9101      	str	r1, [sp, #4]
 80008e6:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 80008ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ec:	f042 0201 	orr.w	r2, r2, #1
 80008f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80008f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	9301      	str	r3, [sp, #4]
 80008fa:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008fc:	460a      	mov	r2, r1
 80008fe:	201c      	movs	r0, #28
 8000900:	f000 f996 	bl	8000c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000904:	201c      	movs	r0, #28
 8000906:	f000 f9a3 	bl	8000c50 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800090a:	b003      	add	sp, #12
 800090c:	f85d fb04 	ldr.w	pc, [sp], #4

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b500      	push	{lr}
 8000912:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	2300      	movs	r3, #0
 8000916:	9305      	str	r3, [sp, #20]
 8000918:	9306      	str	r3, [sp, #24]
 800091a:	9307      	str	r3, [sp, #28]
 800091c:	9308      	str	r3, [sp, #32]
 800091e:	9309      	str	r3, [sp, #36]	@ 0x24
  if(huart->Instance==USART1)
 8000920:	6803      	ldr	r3, [r0, #0]
 8000922:	4a28      	ldr	r2, [pc, #160]	@ (80009c4 <HAL_UART_MspInit+0xb4>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d005      	beq.n	8000934 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8000928:	4a27      	ldr	r2, [pc, #156]	@ (80009c8 <HAL_UART_MspInit+0xb8>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d026      	beq.n	800097c <HAL_UART_MspInit+0x6c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800092e:	b00b      	add	sp, #44	@ 0x2c
 8000930:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000934:	2100      	movs	r1, #0
 8000936:	9101      	str	r1, [sp, #4]
 8000938:	4b24      	ldr	r3, [pc, #144]	@ (80009cc <HAL_UART_MspInit+0xbc>)
 800093a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800093c:	f042 0210 	orr.w	r2, r2, #16
 8000940:	645a      	str	r2, [r3, #68]	@ 0x44
 8000942:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000944:	f002 0210 	and.w	r2, r2, #16
 8000948:	9201      	str	r2, [sp, #4]
 800094a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	9102      	str	r1, [sp, #8]
 800094e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000950:	f042 0201 	orr.w	r2, r2, #1
 8000954:	631a      	str	r2, [r3, #48]	@ 0x30
 8000956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	9302      	str	r3, [sp, #8]
 800095e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000960:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000964:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800096e:	2307      	movs	r3, #7
 8000970:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	a905      	add	r1, sp, #20
 8000974:	4816      	ldr	r0, [pc, #88]	@ (80009d0 <HAL_UART_MspInit+0xc0>)
 8000976:	f000 f983 	bl	8000c80 <HAL_GPIO_Init>
 800097a:	e7d8      	b.n	800092e <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800097c:	2100      	movs	r1, #0
 800097e:	9103      	str	r1, [sp, #12]
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <HAL_UART_MspInit+0xbc>)
 8000982:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000984:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000988:	641a      	str	r2, [r3, #64]	@ 0x40
 800098a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800098c:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000990:	9203      	str	r2, [sp, #12]
 8000992:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000994:	9104      	str	r1, [sp, #16]
 8000996:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000998:	f042 0201 	orr.w	r2, r2, #1
 800099c:	631a      	str	r2, [r3, #48]	@ 0x30
 800099e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	9304      	str	r3, [sp, #16]
 80009a6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009a8:	230c      	movs	r3, #12
 80009aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b4:	2307      	movs	r3, #7
 80009b6:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	a905      	add	r1, sp, #20
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <HAL_UART_MspInit+0xc0>)
 80009bc:	f000 f960 	bl	8000c80 <HAL_GPIO_Init>
}
 80009c0:	e7b5      	b.n	800092e <HAL_UART_MspInit+0x1e>
 80009c2:	bf00      	nop
 80009c4:	40011000 	.word	0x40011000
 80009c8:	40004400 	.word	0x40004400
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000

080009d4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler>

080009d6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler>

080009d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler>

080009da <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler>

080009dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler>

080009de <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	4770      	bx	lr

080009e2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e6:	f000 f8bd 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ea:	bd08      	pop	{r3, pc}

080009ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009ee:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <TIM2_IRQHandler+0xc>)
 80009f0:	f000 feb2 	bl	8001758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009f4:	bd08      	pop	{r3, pc}
 80009f6:	bf00      	nop
 80009f8:	20000118 	.word	0x20000118

080009fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	460c      	mov	r4, r1
 8000a00:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	2500      	movs	r5, #0
 8000a04:	e006      	b.n	8000a14 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000a06:	f3af 8000 	nop.w
 8000a0a:	4621      	mov	r1, r4
 8000a0c:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a10:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000a12:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a14:	42b5      	cmp	r5, r6
 8000a16:	dbf6      	blt.n	8000a06 <_read+0xa>
  }

  return len;
}
 8000a18:	4630      	mov	r0, r6
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}

08000a1c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a20:	4770      	bx	lr

08000a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000a22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a26:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000a28:	2000      	movs	r0, #0
 8000a2a:	4770      	bx	lr

08000a2c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000a30:	2000      	movs	r0, #0
 8000a32:	4770      	bx	lr

08000a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a34:	b510      	push	{r4, lr}
 8000a36:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a38:	4a0c      	ldr	r2, [pc, #48]	@ (8000a6c <_sbrk+0x38>)
 8000a3a:	490d      	ldr	r1, [pc, #52]	@ (8000a70 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a3c:	480d      	ldr	r0, [pc, #52]	@ (8000a74 <_sbrk+0x40>)
 8000a3e:	6800      	ldr	r0, [r0, #0]
 8000a40:	b140      	cbz	r0, 8000a54 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a42:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <_sbrk+0x40>)
 8000a44:	6800      	ldr	r0, [r0, #0]
 8000a46:	4403      	add	r3, r0
 8000a48:	1a52      	subs	r2, r2, r1
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d806      	bhi.n	8000a5c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000a4e:	4a09      	ldr	r2, [pc, #36]	@ (8000a74 <_sbrk+0x40>)
 8000a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000a52:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000a54:	4807      	ldr	r0, [pc, #28]	@ (8000a74 <_sbrk+0x40>)
 8000a56:	4c08      	ldr	r4, [pc, #32]	@ (8000a78 <_sbrk+0x44>)
 8000a58:	6004      	str	r4, [r0, #0]
 8000a5a:	e7f2      	b.n	8000a42 <_sbrk+0xe>
    errno = ENOMEM;
 8000a5c:	f001 fb8a 	bl	8002174 <__errno>
 8000a60:	230c      	movs	r3, #12
 8000a62:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a68:	e7f3      	b.n	8000a52 <_sbrk+0x1e>
 8000a6a:	bf00      	nop
 8000a6c:	20020000 	.word	0x20020000
 8000a70:	00000400 	.word	0x00000400
 8000a74:	20000160 	.word	0x20000160
 8000a78:	200002b8 	.word	0x200002b8

08000a7c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a7c:	4a03      	ldr	r2, [pc, #12]	@ (8000a8c <SystemInit+0x10>)
 8000a7e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000a82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a86:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ac8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a94:	f7ff fff2 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9a:	490d      	ldr	r1, [pc, #52]	@ (8000ad0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8000adc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f001 fb5f 	bl	8002180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac2:	f7ff fea3 	bl	800080c <main>
  bx  lr    
 8000ac6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ad4:	08002d98 	.word	0x08002d98
  ldr r2, =_sbss
 8000ad8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000adc:	200002b4 	.word	0x200002b4

08000ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC_IRQHandler>
	...

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b510      	push	{r4, lr}
 8000ae6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <HAL_InitTick+0x40>)
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000af4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b28 <HAL_InitTick+0x44>)
 8000af6:	6810      	ldr	r0, [r2, #0]
 8000af8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000afc:	f000 f8ac 	bl	8000c58 <HAL_SYSTICK_Config>
 8000b00:	b968      	cbnz	r0, 8000b1e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	2c0f      	cmp	r4, #15
 8000b04:	d901      	bls.n	8000b0a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b06:	2001      	movs	r0, #1
 8000b08:	e00a      	b.n	8000b20 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4621      	mov	r1, r4
 8000b0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b12:	f000 f88d 	bl	8000c30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b16:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <HAL_InitTick+0x48>)
 8000b18:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b1e:	2001      	movs	r0, #1
}
 8000b20:	bd10      	pop	{r4, pc}
 8000b22:	bf00      	nop
 8000b24:	20000004 	.word	0x20000004
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000008 	.word	0x20000008

08000b30 <HAL_Init>:
{
 8000b30:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b32:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <HAL_Init+0x30>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b3a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000b42:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000b4a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f85d 	bl	8000c0c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff ffc6 	bl	8000ae4 <HAL_InitTick>
  HAL_MspInit();
 8000b58:	f7ff fe9c 	bl	8000894 <HAL_MspInit>
}
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	bd08      	pop	{r3, pc}
 8000b60:	40023c00 	.word	0x40023c00

08000b64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b64:	4a03      	ldr	r2, [pc, #12]	@ (8000b74 <HAL_IncTick+0x10>)
 8000b66:	6811      	ldr	r1, [r2, #0]
 8000b68:	4b03      	ldr	r3, [pc, #12]	@ (8000b78 <HAL_IncTick+0x14>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	440b      	add	r3, r1
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000164 	.word	0x20000164
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b7c:	4b01      	ldr	r3, [pc, #4]	@ (8000b84 <HAL_GetTick+0x8>)
 8000b7e:	6818      	ldr	r0, [r3, #0]
}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000164 	.word	0x20000164

08000b88 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	db07      	blt.n	8000b9c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8c:	f000 021f 	and.w	r2, r0, #31
 8000b90:	0940      	lsrs	r0, r0, #5
 8000b92:	2301      	movs	r3, #1
 8000b94:	4093      	lsls	r3, r2
 8000b96:	4a02      	ldr	r2, [pc, #8]	@ (8000ba0 <__NVIC_EnableIRQ+0x18>)
 8000b98:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	db08      	blt.n	8000bba <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	0109      	lsls	r1, r1, #4
 8000baa:	b2c9      	uxtb	r1, r1
 8000bac:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000bb0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000bb4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000bb8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bba:	f000 000f 	and.w	r0, r0, #15
 8000bbe:	0109      	lsls	r1, r1, #4
 8000bc0:	b2c9      	uxtb	r1, r1
 8000bc2:	4b01      	ldr	r3, [pc, #4]	@ (8000bc8 <__NVIC_SetPriority+0x24>)
 8000bc4:	5419      	strb	r1, [r3, r0]
  }
}
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed14 	.word	0xe000ed14

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bce:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd2:	f1c0 0c07 	rsb	ip, r0, #7
 8000bd6:	f1bc 0f04 	cmp.w	ip, #4
 8000bda:	bf28      	it	cs
 8000bdc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be0:	1d03      	adds	r3, r0, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d90f      	bls.n	8000c06 <NVIC_EncodePriority+0x3a>
 8000be6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000bec:	fa0e f00c 	lsl.w	r0, lr, ip
 8000bf0:	ea21 0100 	bic.w	r1, r1, r0
 8000bf4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf6:	fa0e fe03 	lsl.w	lr, lr, r3
 8000bfa:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000bfe:	ea41 0002 	orr.w	r0, r1, r2
 8000c02:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c06:	2300      	movs	r3, #0
 8000c08:	e7ee      	b.n	8000be8 <NVIC_EncodePriority+0x1c>
	...

08000c0c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c0e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c10:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000c14:	041b      	lsls	r3, r3, #16
 8000c16:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c18:	0200      	lsls	r0, r0, #8
 8000c1a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000c28:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c30:	b510      	push	{r4, lr}
 8000c32:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <HAL_NVIC_SetPriority+0x1c>)
 8000c36:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c38:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000c3c:	f7ff ffc6 	bl	8000bcc <NVIC_EncodePriority>
 8000c40:	4601      	mov	r1, r0
 8000c42:	4620      	mov	r0, r4
 8000c44:	f7ff ffae 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000c48:	bd10      	pop	{r4, pc}
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c52:	f7ff ff99 	bl	8000b88 <__NVIC_EnableIRQ>
}
 8000c56:	bd08      	pop	{r3, pc}

08000c58 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	3801      	subs	r0, #1
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d20b      	bcs.n	8000c78 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c60:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000c64:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <HAL_SYSTICK_Config+0x24>)
 8000c68:	21f0      	movs	r1, #240	@ 0xf0
 8000c6a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6e:	2000      	movs	r0, #0
 8000c70:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	2207      	movs	r2, #7
 8000c74:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c76:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c78:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	2b0f      	cmp	r3, #15
 8000c84:	f200 80e3 	bhi.w	8000e4e <HAL_GPIO_Init+0x1ce>
{
 8000c88:	b570      	push	{r4, r5, r6, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	e065      	b.n	8000d5a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c8e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c90:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c94:	2403      	movs	r4, #3
 8000c96:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c9a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c9e:	68cc      	ldr	r4, [r1, #12]
 8000ca0:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ca4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000ca6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000caa:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cae:	684a      	ldr	r2, [r1, #4]
 8000cb0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000cb8:	6042      	str	r2, [r0, #4]
 8000cba:	e05c      	b.n	8000d76 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cbc:	08dc      	lsrs	r4, r3, #3
 8000cbe:	3408      	adds	r4, #8
 8000cc0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cc4:	f003 0507 	and.w	r5, r3, #7
 8000cc8:	00ad      	lsls	r5, r5, #2
 8000cca:	f04f 0e0f 	mov.w	lr, #15
 8000cce:	fa0e fe05 	lsl.w	lr, lr, r5
 8000cd2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cd6:	690a      	ldr	r2, [r1, #16]
 8000cd8:	40aa      	lsls	r2, r5
 8000cda:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000cde:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000ce2:	e05c      	b.n	8000d9e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ce4:	2206      	movs	r2, #6
 8000ce6:	e000      	b.n	8000cea <HAL_GPIO_Init+0x6a>
 8000ce8:	2200      	movs	r2, #0
 8000cea:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cee:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cf0:	3402      	adds	r4, #2
 8000cf2:	4d57      	ldr	r5, [pc, #348]	@ (8000e50 <HAL_GPIO_Init+0x1d0>)
 8000cf4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cf8:	4a56      	ldr	r2, [pc, #344]	@ (8000e54 <HAL_GPIO_Init+0x1d4>)
 8000cfa:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cfc:	ea6f 020c 	mvn.w	r2, ip
 8000d00:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d04:	684e      	ldr	r6, [r1, #4]
 8000d06:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000d0a:	d001      	beq.n	8000d10 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000d0c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000d10:	4c50      	ldr	r4, [pc, #320]	@ (8000e54 <HAL_GPIO_Init+0x1d4>)
 8000d12:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000d14:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d16:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d1a:	684e      	ldr	r6, [r1, #4]
 8000d1c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000d20:	d001      	beq.n	8000d26 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000d22:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000d26:	4c4b      	ldr	r4, [pc, #300]	@ (8000e54 <HAL_GPIO_Init+0x1d4>)
 8000d28:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000d2a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d2c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d30:	684e      	ldr	r6, [r1, #4]
 8000d32:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000d36:	d001      	beq.n	8000d3c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000d38:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000d3c:	4c45      	ldr	r4, [pc, #276]	@ (8000e54 <HAL_GPIO_Init+0x1d4>)
 8000d3e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d40:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d42:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d44:	684d      	ldr	r5, [r1, #4]
 8000d46:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000d4a:	d001      	beq.n	8000d50 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000d4c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000d50:	4c40      	ldr	r4, [pc, #256]	@ (8000e54 <HAL_GPIO_Init+0x1d4>)
 8000d52:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d54:	3301      	adds	r3, #1
 8000d56:	2b0f      	cmp	r3, #15
 8000d58:	d877      	bhi.n	8000e4a <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5e:	680c      	ldr	r4, [r1, #0]
 8000d60:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000d64:	ea32 0404 	bics.w	r4, r2, r4
 8000d68:	d1f4      	bne.n	8000d54 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6a:	684c      	ldr	r4, [r1, #4]
 8000d6c:	f004 0403 	and.w	r4, r4, #3
 8000d70:	3c01      	subs	r4, #1
 8000d72:	2c01      	cmp	r4, #1
 8000d74:	d98b      	bls.n	8000c8e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d76:	684a      	ldr	r2, [r1, #4]
 8000d78:	f002 0203 	and.w	r2, r2, #3
 8000d7c:	2a03      	cmp	r2, #3
 8000d7e:	d009      	beq.n	8000d94 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000d80:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d82:	005d      	lsls	r5, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	40aa      	lsls	r2, r5
 8000d88:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8c:	688a      	ldr	r2, [r1, #8]
 8000d8e:	40aa      	lsls	r2, r5
 8000d90:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000d92:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d94:	684a      	ldr	r2, [r1, #4]
 8000d96:	f002 0203 	and.w	r2, r2, #3
 8000d9a:	2a02      	cmp	r2, #2
 8000d9c:	d08e      	beq.n	8000cbc <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000d9e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f20e 	lsl.w	r2, r2, lr
 8000daa:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dae:	684a      	ldr	r2, [r1, #4]
 8000db0:	f002 0203 	and.w	r2, r2, #3
 8000db4:	fa02 f20e 	lsl.w	r2, r2, lr
 8000db8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000dba:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dbc:	684a      	ldr	r2, [r1, #4]
 8000dbe:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000dc2:	d0c7      	beq.n	8000d54 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	9201      	str	r2, [sp, #4]
 8000dc8:	4a23      	ldr	r2, [pc, #140]	@ (8000e58 <HAL_GPIO_Init+0x1d8>)
 8000dca:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000dcc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000dd0:	6454      	str	r4, [r2, #68]	@ 0x44
 8000dd2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000dd4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000dd8:	9201      	str	r2, [sp, #4]
 8000dda:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ddc:	089c      	lsrs	r4, r3, #2
 8000dde:	1ca5      	adds	r5, r4, #2
 8000de0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e50 <HAL_GPIO_Init+0x1d0>)
 8000de2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de6:	f003 0e03 	and.w	lr, r3, #3
 8000dea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	fa02 f20e 	lsl.w	r2, r2, lr
 8000df4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000df8:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <HAL_GPIO_Init+0x1dc>)
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f43f af74 	beq.w	8000ce8 <HAL_GPIO_Init+0x68>
 8000e00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d016      	beq.n	8000e36 <HAL_GPIO_Init+0x1b6>
 8000e08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e0c:	4290      	cmp	r0, r2
 8000e0e:	d014      	beq.n	8000e3a <HAL_GPIO_Init+0x1ba>
 8000e10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e14:	4290      	cmp	r0, r2
 8000e16:	d012      	beq.n	8000e3e <HAL_GPIO_Init+0x1be>
 8000e18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	d010      	beq.n	8000e42 <HAL_GPIO_Init+0x1c2>
 8000e20:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e24:	4290      	cmp	r0, r2
 8000e26:	d00e      	beq.n	8000e46 <HAL_GPIO_Init+0x1c6>
 8000e28:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	f43f af59 	beq.w	8000ce4 <HAL_GPIO_Init+0x64>
 8000e32:	2207      	movs	r2, #7
 8000e34:	e759      	b.n	8000cea <HAL_GPIO_Init+0x6a>
 8000e36:	2201      	movs	r2, #1
 8000e38:	e757      	b.n	8000cea <HAL_GPIO_Init+0x6a>
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	e755      	b.n	8000cea <HAL_GPIO_Init+0x6a>
 8000e3e:	2203      	movs	r2, #3
 8000e40:	e753      	b.n	8000cea <HAL_GPIO_Init+0x6a>
 8000e42:	2204      	movs	r2, #4
 8000e44:	e751      	b.n	8000cea <HAL_GPIO_Init+0x6a>
 8000e46:	2205      	movs	r2, #5
 8000e48:	e74f      	b.n	8000cea <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd70      	pop	{r4, r5, r6, pc}
 8000e4e:	4770      	bx	lr
 8000e50:	40013800 	.word	0x40013800
 8000e54:	40013c00 	.word	0x40013c00
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e60:	b10a      	cbz	r2, 8000e66 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e62:	6181      	str	r1, [r0, #24]
 8000e64:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e66:	0409      	lsls	r1, r1, #16
 8000e68:	6181      	str	r1, [r0, #24]
  }
}
 8000e6a:	4770      	bx	lr

08000e6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000e6c:	b510      	push	{r4, lr}
 8000e6e:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <HAL_PWREx_EnableOverDrive+0x70>)
 8000e76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e78:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <HAL_PWREx_EnableOverDrive+0x74>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e8e:	f7ff fe75 	bl	8000b7c <HAL_GetTick>
 8000e92:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e94:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <HAL_PWREx_EnableOverDrive+0x78>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000e9c:	d108      	bne.n	8000eb0 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e9e:	f7ff fe6d 	bl	8000b7c <HAL_GetTick>
 8000ea2:	1b00      	subs	r0, r0, r4
 8000ea4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000ea8:	d9f4      	bls.n	8000e94 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000eaa:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000eac:	b002      	add	sp, #8
 8000eae:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <HAL_PWREx_EnableOverDrive+0x74>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 8000eb6:	f7ff fe61 	bl	8000b7c <HAL_GetTick>
 8000eba:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ebc:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <HAL_PWREx_EnableOverDrive+0x78>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000ec4:	d107      	bne.n	8000ed6 <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ec6:	f7ff fe59 	bl	8000b7c <HAL_GetTick>
 8000eca:	1b00      	subs	r0, r0, r4
 8000ecc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000ed0:	d9f4      	bls.n	8000ebc <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	e7ea      	b.n	8000eac <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	e7e8      	b.n	8000eac <HAL_PWREx_EnableOverDrive+0x40>
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	420e0000 	.word	0x420e0000
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ee8:	2800      	cmp	r0, #0
 8000eea:	f000 809b 	beq.w	8001024 <HAL_RCC_ClockConfig+0x13c>
{
 8000eee:	b570      	push	{r4, r5, r6, lr}
 8000ef0:	460d      	mov	r5, r1
 8000ef2:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ef4:	4b4f      	ldr	r3, [pc, #316]	@ (8001034 <HAL_RCC_ClockConfig+0x14c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 030f 	and.w	r3, r3, #15
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d208      	bcs.n	8000f12 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f00:	b2cb      	uxtb	r3, r1
 8000f02:	4a4c      	ldr	r2, [pc, #304]	@ (8001034 <HAL_RCC_ClockConfig+0x14c>)
 8000f04:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f06:	6813      	ldr	r3, [r2, #0]
 8000f08:	f003 030f 	and.w	r3, r3, #15
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	f040 808b 	bne.w	8001028 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f12:	6823      	ldr	r3, [r4, #0]
 8000f14:	f013 0f02 	tst.w	r3, #2
 8000f18:	d017      	beq.n	8000f4a <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f1a:	f013 0f04 	tst.w	r3, #4
 8000f1e:	d004      	beq.n	8000f2a <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f20:	4a45      	ldr	r2, [pc, #276]	@ (8001038 <HAL_RCC_ClockConfig+0x150>)
 8000f22:	6893      	ldr	r3, [r2, #8]
 8000f24:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000f28:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	f013 0f08 	tst.w	r3, #8
 8000f30:	d004      	beq.n	8000f3c <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f32:	4a41      	ldr	r2, [pc, #260]	@ (8001038 <HAL_RCC_ClockConfig+0x150>)
 8000f34:	6893      	ldr	r3, [r2, #8]
 8000f36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f3c:	4a3e      	ldr	r2, [pc, #248]	@ (8001038 <HAL_RCC_ClockConfig+0x150>)
 8000f3e:	6893      	ldr	r3, [r2, #8]
 8000f40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f44:	68a1      	ldr	r1, [r4, #8]
 8000f46:	430b      	orrs	r3, r1
 8000f48:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	f013 0f01 	tst.w	r3, #1
 8000f50:	d032      	beq.n	8000fb8 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f52:	6863      	ldr	r3, [r4, #4]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d021      	beq.n	8000f9c <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f58:	1e9a      	subs	r2, r3, #2
 8000f5a:	2a01      	cmp	r2, #1
 8000f5c:	d925      	bls.n	8000faa <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f5e:	4a36      	ldr	r2, [pc, #216]	@ (8001038 <HAL_RCC_ClockConfig+0x150>)
 8000f60:	6812      	ldr	r2, [r2, #0]
 8000f62:	f012 0f02 	tst.w	r2, #2
 8000f66:	d061      	beq.n	800102c <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f68:	4933      	ldr	r1, [pc, #204]	@ (8001038 <HAL_RCC_ClockConfig+0x150>)
 8000f6a:	688a      	ldr	r2, [r1, #8]
 8000f6c:	f022 0203 	bic.w	r2, r2, #3
 8000f70:	4313      	orrs	r3, r2
 8000f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f74:	f7ff fe02 	bl	8000b7c <HAL_GetTick>
 8000f78:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001038 <HAL_RCC_ClockConfig+0x150>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
 8000f82:	6862      	ldr	r2, [r4, #4]
 8000f84:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f88:	d016      	beq.n	8000fb8 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f8a:	f7ff fdf7 	bl	8000b7c <HAL_GetTick>
 8000f8e:	1b80      	subs	r0, r0, r6
 8000f90:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f94:	4298      	cmp	r0, r3
 8000f96:	d9f0      	bls.n	8000f7a <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8000f98:	2003      	movs	r0, #3
 8000f9a:	e042      	b.n	8001022 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9c:	4a26      	ldr	r2, [pc, #152]	@ (8001038 <HAL_RCC_ClockConfig+0x150>)
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8000fa4:	d1e0      	bne.n	8000f68 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	e03b      	b.n	8001022 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000faa:	4a23      	ldr	r2, [pc, #140]	@ (8001038 <HAL_RCC_ClockConfig+0x150>)
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8000fb2:	d1d9      	bne.n	8000f68 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	e034      	b.n	8001022 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <HAL_RCC_ClockConfig+0x14c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	42ab      	cmp	r3, r5
 8000fc2:	d907      	bls.n	8000fd4 <HAL_RCC_ClockConfig+0xec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fc4:	b2ea      	uxtb	r2, r5
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <HAL_RCC_ClockConfig+0x14c>)
 8000fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	42ab      	cmp	r3, r5
 8000fd2:	d12d      	bne.n	8001030 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	f013 0f04 	tst.w	r3, #4
 8000fda:	d006      	beq.n	8000fea <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fdc:	4a16      	ldr	r2, [pc, #88]	@ (8001038 <HAL_RCC_ClockConfig+0x150>)
 8000fde:	6893      	ldr	r3, [r2, #8]
 8000fe0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8000fe4:	68e1      	ldr	r1, [r4, #12]
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	f013 0f08 	tst.w	r3, #8
 8000ff0:	d007      	beq.n	8001002 <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ff2:	4a11      	ldr	r2, [pc, #68]	@ (8001038 <HAL_RCC_ClockConfig+0x150>)
 8000ff4:	6893      	ldr	r3, [r2, #8]
 8000ff6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8000ffa:	6921      	ldr	r1, [r4, #16]
 8000ffc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001000:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001002:	f000 f847 	bl	8001094 <HAL_RCC_GetSysClockFreq>
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <HAL_RCC_ClockConfig+0x150>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800100e:	4a0b      	ldr	r2, [pc, #44]	@ (800103c <HAL_RCC_ClockConfig+0x154>)
 8001010:	5cd3      	ldrb	r3, [r2, r3]
 8001012:	40d8      	lsrs	r0, r3
 8001014:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <HAL_RCC_ClockConfig+0x158>)
 8001016:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <HAL_RCC_ClockConfig+0x15c>)
 800101a:	6818      	ldr	r0, [r3, #0]
 800101c:	f7ff fd62 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 8001020:	2000      	movs	r0, #0
}
 8001022:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001024:	2001      	movs	r0, #1
}
 8001026:	4770      	bx	lr
      return HAL_ERROR;
 8001028:	2001      	movs	r0, #1
 800102a:	e7fa      	b.n	8001022 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800102c:	2001      	movs	r0, #1
 800102e:	e7f8      	b.n	8001022 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001030:	2001      	movs	r0, #1
 8001032:	e7f6      	b.n	8001022 <HAL_RCC_ClockConfig+0x13a>
 8001034:	40023c00 	.word	0x40023c00
 8001038:	40023800 	.word	0x40023800
 800103c:	08002d44 	.word	0x08002d44
 8001040:	20000000 	.word	0x20000000
 8001044:	20000008 	.word	0x20000008

08001048 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001048:	4b01      	ldr	r3, [pc, #4]	@ (8001050 <HAL_RCC_GetHCLKFreq+0x8>)
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000000 	.word	0x20000000

08001054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001054:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001056:	f7ff fff7 	bl	8001048 <HAL_RCC_GetHCLKFreq>
 800105a:	4b04      	ldr	r3, [pc, #16]	@ (800106c <HAL_RCC_GetPCLK1Freq+0x18>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001062:	4a03      	ldr	r2, [pc, #12]	@ (8001070 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001064:	5cd3      	ldrb	r3, [r2, r3]
}
 8001066:	40d8      	lsrs	r0, r3
 8001068:	bd08      	pop	{r3, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	08002d3c 	.word	0x08002d3c

08001074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001074:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001076:	f7ff ffe7 	bl	8001048 <HAL_RCC_GetHCLKFreq>
 800107a:	4b04      	ldr	r3, [pc, #16]	@ (800108c <HAL_RCC_GetPCLK2Freq+0x18>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001082:	4a03      	ldr	r2, [pc, #12]	@ (8001090 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001084:	5cd3      	ldrb	r3, [r2, r3]
}
 8001086:	40d8      	lsrs	r0, r3
 8001088:	bd08      	pop	{r3, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	08002d3c 	.word	0x08002d3c

08001094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001094:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001096:	4b60      	ldr	r3, [pc, #384]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x184>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d007      	beq.n	80010b2 <HAL_RCC_GetSysClockFreq+0x1e>
 80010a2:	2b0c      	cmp	r3, #12
 80010a4:	d05f      	beq.n	8001166 <HAL_RCC_GetSysClockFreq+0xd2>
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d001      	beq.n	80010ae <HAL_RCC_GetSysClockFreq+0x1a>
 80010aa:	485c      	ldr	r0, [pc, #368]	@ (800121c <HAL_RCC_GetSysClockFreq+0x188>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80010ac:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80010ae:	485c      	ldr	r0, [pc, #368]	@ (8001220 <HAL_RCC_GetSysClockFreq+0x18c>)
 80010b0:	e7fc      	b.n	80010ac <HAL_RCC_GetSysClockFreq+0x18>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010b2:	4b59      	ldr	r3, [pc, #356]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x184>)
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80010c0:	d02c      	beq.n	800111c <HAL_RCC_GetSysClockFreq+0x88>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010c2:	4b55      	ldr	r3, [pc, #340]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x184>)
 80010c4:	6858      	ldr	r0, [r3, #4]
 80010c6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80010ca:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80010ce:	ebbc 0c00 	subs.w	ip, ip, r0
 80010d2:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80010d6:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80010da:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80010de:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80010e2:	ebb1 010c 	subs.w	r1, r1, ip
 80010e6:	eb63 030e 	sbc.w	r3, r3, lr
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80010f0:	00c9      	lsls	r1, r1, #3
 80010f2:	eb11 0c00 	adds.w	ip, r1, r0
 80010f6:	f143 0300 	adc.w	r3, r3, #0
 80010fa:	0259      	lsls	r1, r3, #9
 80010fc:	2300      	movs	r3, #0
 80010fe:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8001102:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8001106:	f7ff f8d3 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800110a:	4b43      	ldr	r3, [pc, #268]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x184>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001112:	3301      	adds	r3, #1
 8001114:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001116:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800111a:	e7c7      	b.n	80010ac <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800111c:	4b3e      	ldr	r3, [pc, #248]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x184>)
 800111e:	6858      	ldr	r0, [r3, #4]
 8001120:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001124:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001128:	ebbc 0c00 	subs.w	ip, ip, r0
 800112c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001130:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001134:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001138:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800113c:	ebb1 010c 	subs.w	r1, r1, ip
 8001140:	eb63 030e 	sbc.w	r3, r3, lr
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800114a:	00c9      	lsls	r1, r1, #3
 800114c:	eb11 0c00 	adds.w	ip, r1, r0
 8001150:	f143 0300 	adc.w	r3, r3, #0
 8001154:	0299      	lsls	r1, r3, #10
 8001156:	2300      	movs	r3, #0
 8001158:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800115c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001160:	f7ff f8a6 	bl	80002b0 <__aeabi_uldivmod>
 8001164:	e7d1      	b.n	800110a <HAL_RCC_GetSysClockFreq+0x76>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001166:	4b2c      	ldr	r3, [pc, #176]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x184>)
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001174:	d02a      	beq.n	80011cc <HAL_RCC_GetSysClockFreq+0x138>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001176:	4b28      	ldr	r3, [pc, #160]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x184>)
 8001178:	6858      	ldr	r0, [r3, #4]
 800117a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800117e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001182:	ebbc 0c00 	subs.w	ip, ip, r0
 8001186:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800118a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800118e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001192:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001196:	ebb1 010c 	subs.w	r1, r1, ip
 800119a:	eb63 030e 	sbc.w	r3, r3, lr
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80011a4:	00c9      	lsls	r1, r1, #3
 80011a6:	eb11 0c00 	adds.w	ip, r1, r0
 80011aa:	f143 0300 	adc.w	r3, r3, #0
 80011ae:	0259      	lsls	r1, r3, #9
 80011b0:	2300      	movs	r3, #0
 80011b2:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80011b6:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80011ba:	f7ff f879 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80011be:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x184>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 80011c6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80011ca:	e76f      	b.n	80010ac <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x184>)
 80011ce:	6858      	ldr	r0, [r3, #4]
 80011d0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80011d4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80011d8:	ebbc 0c00 	subs.w	ip, ip, r0
 80011dc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80011e0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80011e4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80011e8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80011ec:	ebb1 010c 	subs.w	r1, r1, ip
 80011f0:	eb63 030e 	sbc.w	r3, r3, lr
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80011fa:	00c9      	lsls	r1, r1, #3
 80011fc:	eb11 0c00 	adds.w	ip, r1, r0
 8001200:	f143 0300 	adc.w	r3, r3, #0
 8001204:	0299      	lsls	r1, r3, #10
 8001206:	2300      	movs	r3, #0
 8001208:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800120c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001210:	f7ff f84e 	bl	80002b0 <__aeabi_uldivmod>
 8001214:	e7d3      	b.n	80011be <HAL_RCC_GetSysClockFreq+0x12a>
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	00f42400 	.word	0x00f42400
 8001220:	007a1200 	.word	0x007a1200

08001224 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001224:	2800      	cmp	r0, #0
 8001226:	f000 8201 	beq.w	800162c <HAL_RCC_OscConfig+0x408>
{
 800122a:	b570      	push	{r4, r5, r6, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001230:	6803      	ldr	r3, [r0, #0]
 8001232:	f013 0f01 	tst.w	r3, #1
 8001236:	d041      	beq.n	80012bc <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001238:	4b99      	ldr	r3, [pc, #612]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 030c 	and.w	r3, r3, #12
 8001240:	2b04      	cmp	r3, #4
 8001242:	d032      	beq.n	80012aa <HAL_RCC_OscConfig+0x86>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001244:	4b96      	ldr	r3, [pc, #600]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 030c 	and.w	r3, r3, #12
        || \
 800124c:	2b08      	cmp	r3, #8
 800124e:	d027      	beq.n	80012a0 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001250:	4b93      	ldr	r3, [pc, #588]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001258:	2b0c      	cmp	r3, #12
 800125a:	d059      	beq.n	8001310 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125c:	6863      	ldr	r3, [r4, #4]
 800125e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001262:	d05b      	beq.n	800131c <HAL_RCC_OscConfig+0xf8>
 8001264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001268:	d05e      	beq.n	8001328 <HAL_RCC_OscConfig+0x104>
 800126a:	4b8d      	ldr	r3, [pc, #564]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800127a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800127c:	6863      	ldr	r3, [r4, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d05c      	beq.n	800133c <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001282:	f7ff fc7b 	bl	8000b7c <HAL_GetTick>
 8001286:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001288:	4b85      	ldr	r3, [pc, #532]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001290:	d114      	bne.n	80012bc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001292:	f7ff fc73 	bl	8000b7c <HAL_GetTick>
 8001296:	1b40      	subs	r0, r0, r5
 8001298:	2864      	cmp	r0, #100	@ 0x64
 800129a:	d9f5      	bls.n	8001288 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 800129c:	2003      	movs	r0, #3
 800129e:	e1cc      	b.n	800163a <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80012a0:	4b7f      	ldr	r3, [pc, #508]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80012a8:	d0d2      	beq.n	8001250 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012aa:	4b7d      	ldr	r3, [pc, #500]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80012b2:	d003      	beq.n	80012bc <HAL_RCC_OscConfig+0x98>
 80012b4:	6863      	ldr	r3, [r4, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 81ba 	beq.w	8001630 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	f013 0f02 	tst.w	r3, #2
 80012c2:	d060      	beq.n	8001386 <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80012c4:	4b76      	ldr	r3, [pc, #472]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f013 0f0c 	tst.w	r3, #12
 80012cc:	d04a      	beq.n	8001364 <HAL_RCC_OscConfig+0x140>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80012ce:	4b74      	ldr	r3, [pc, #464]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
        || \
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d03f      	beq.n	800135a <HAL_RCC_OscConfig+0x136>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012da:	4b71      	ldr	r3, [pc, #452]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80012e2:	2b0c      	cmp	r3, #12
 80012e4:	d069      	beq.n	80013ba <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012e6:	68e3      	ldr	r3, [r4, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d075      	beq.n	80013d8 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ec:	4b6d      	ldr	r3, [pc, #436]	@ (80014a4 <HAL_RCC_OscConfig+0x280>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f2:	f7ff fc43 	bl	8000b7c <HAL_GetTick>
 80012f6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f8:	4b69      	ldr	r3, [pc, #420]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f013 0f02 	tst.w	r3, #2
 8001300:	d161      	bne.n	80013c6 <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff fc3b 	bl	8000b7c <HAL_GetTick>
 8001306:	1b40      	subs	r0, r0, r5
 8001308:	2802      	cmp	r0, #2
 800130a:	d9f5      	bls.n	80012f8 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 800130c:	2003      	movs	r0, #3
 800130e:	e194      	b.n	800163a <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001310:	4b63      	ldr	r3, [pc, #396]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001318:	d0a0      	beq.n	800125c <HAL_RCC_OscConfig+0x38>
 800131a:	e7c6      	b.n	80012aa <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131c:	4a60      	ldr	r2, [pc, #384]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 800131e:	6813      	ldr	r3, [r2, #0]
 8001320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e7a9      	b.n	800127c <HAL_RCC_OscConfig+0x58>
 8001328:	4b5d      	ldr	r3, [pc, #372]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e79f      	b.n	800127c <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 800133c:	f7ff fc1e 	bl	8000b7c <HAL_GetTick>
 8001340:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001342:	4b57      	ldr	r3, [pc, #348]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800134a:	d0b7      	beq.n	80012bc <HAL_RCC_OscConfig+0x98>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fc16 	bl	8000b7c <HAL_GetTick>
 8001350:	1b40      	subs	r0, r0, r5
 8001352:	2864      	cmp	r0, #100	@ 0x64
 8001354:	d9f5      	bls.n	8001342 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8001356:	2003      	movs	r0, #3
 8001358:	e16f      	b.n	800163a <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800135a:	4b51      	ldr	r3, [pc, #324]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001362:	d1ba      	bne.n	80012da <HAL_RCC_OscConfig+0xb6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001364:	4b4e      	ldr	r3, [pc, #312]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f013 0f02 	tst.w	r3, #2
 800136c:	d003      	beq.n	8001376 <HAL_RCC_OscConfig+0x152>
 800136e:	68e3      	ldr	r3, [r4, #12]
 8001370:	2b01      	cmp	r3, #1
 8001372:	f040 815f 	bne.w	8001634 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	4a4a      	ldr	r2, [pc, #296]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 8001378:	6813      	ldr	r3, [r2, #0]
 800137a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800137e:	6921      	ldr	r1, [r4, #16]
 8001380:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001384:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001386:	6823      	ldr	r3, [r4, #0]
 8001388:	f013 0f08 	tst.w	r3, #8
 800138c:	d049      	beq.n	8001422 <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800138e:	6963      	ldr	r3, [r4, #20]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d033      	beq.n	80013fc <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001394:	4b43      	ldr	r3, [pc, #268]	@ (80014a4 <HAL_RCC_OscConfig+0x280>)
 8001396:	2201      	movs	r2, #1
 8001398:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139c:	f7ff fbee 	bl	8000b7c <HAL_GetTick>
 80013a0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a2:	4b3f      	ldr	r3, [pc, #252]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 80013a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013a6:	f013 0f02 	tst.w	r3, #2
 80013aa:	d13a      	bne.n	8001422 <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ac:	f7ff fbe6 	bl	8000b7c <HAL_GetTick>
 80013b0:	1b40      	subs	r0, r0, r5
 80013b2:	2802      	cmp	r0, #2
 80013b4:	d9f5      	bls.n	80013a2 <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 80013b6:	2003      	movs	r0, #3
 80013b8:	e13f      	b.n	800163a <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	4b39      	ldr	r3, [pc, #228]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80013c2:	d190      	bne.n	80012e6 <HAL_RCC_OscConfig+0xc2>
 80013c4:	e7ce      	b.n	8001364 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4a36      	ldr	r2, [pc, #216]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 80013c8:	6813      	ldr	r3, [r2, #0]
 80013ca:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80013ce:	6921      	ldr	r1, [r4, #16]
 80013d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e7d6      	b.n	8001386 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80013d8:	4b32      	ldr	r3, [pc, #200]	@ (80014a4 <HAL_RCC_OscConfig+0x280>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013de:	f7ff fbcd 	bl	8000b7c <HAL_GetTick>
 80013e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e4:	4b2e      	ldr	r3, [pc, #184]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f013 0f02 	tst.w	r3, #2
 80013ec:	d0cb      	beq.n	8001386 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ee:	f7ff fbc5 	bl	8000b7c <HAL_GetTick>
 80013f2:	1b40      	subs	r0, r0, r5
 80013f4:	2802      	cmp	r0, #2
 80013f6:	d9f5      	bls.n	80013e4 <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 80013f8:	2003      	movs	r0, #3
 80013fa:	e11e      	b.n	800163a <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fc:	4b29      	ldr	r3, [pc, #164]	@ (80014a4 <HAL_RCC_OscConfig+0x280>)
 80013fe:	2200      	movs	r2, #0
 8001400:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001404:	f7ff fbba 	bl	8000b7c <HAL_GetTick>
 8001408:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140a:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 800140c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800140e:	f013 0f02 	tst.w	r3, #2
 8001412:	d006      	beq.n	8001422 <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff fbb2 	bl	8000b7c <HAL_GetTick>
 8001418:	1b40      	subs	r0, r0, r5
 800141a:	2802      	cmp	r0, #2
 800141c:	d9f5      	bls.n	800140a <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 800141e:	2003      	movs	r0, #3
 8001420:	e10b      	b.n	800163a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	f013 0f04 	tst.w	r3, #4
 8001428:	d076      	beq.n	8001518 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800142a:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001432:	d133      	bne.n	800149c <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 800143a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800143c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001440:	641a      	str	r2, [r3, #64]	@ 0x40
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800144c:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <HAL_RCC_OscConfig+0x284>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001456:	d029      	beq.n	80014ac <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001458:	68a3      	ldr	r3, [r4, #8]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d03a      	beq.n	80014d4 <HAL_RCC_OscConfig+0x2b0>
 800145e:	2b05      	cmp	r3, #5
 8001460:	d03e      	beq.n	80014e0 <HAL_RCC_OscConfig+0x2bc>
 8001462:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 8001464:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001466:	f022 0201 	bic.w	r2, r2, #1
 800146a:	671a      	str	r2, [r3, #112]	@ 0x70
 800146c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800146e:	f022 0204 	bic.w	r2, r2, #4
 8001472:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001474:	68a3      	ldr	r3, [r4, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d03c      	beq.n	80014f4 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147a:	f7ff fb7f 	bl	8000b7c <HAL_GetTick>
 800147e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <HAL_RCC_OscConfig+0x27c>)
 8001482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001484:	f013 0f02 	tst.w	r3, #2
 8001488:	d145      	bne.n	8001516 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fb77 	bl	8000b7c <HAL_GetTick>
 800148e:	1b80      	subs	r0, r0, r6
 8001490:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001494:	4298      	cmp	r0, r3
 8001496:	d9f3      	bls.n	8001480 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 8001498:	2003      	movs	r0, #3
 800149a:	e0ce      	b.n	800163a <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 800149c:	2500      	movs	r5, #0
 800149e:	e7d6      	b.n	800144e <HAL_RCC_OscConfig+0x22a>
 80014a0:	40023800 	.word	0x40023800
 80014a4:	42470000 	.word	0x42470000
 80014a8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ac:	4a6b      	ldr	r2, [pc, #428]	@ (800165c <HAL_RCC_OscConfig+0x438>)
 80014ae:	6813      	ldr	r3, [r2, #0]
 80014b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80014b6:	f7ff fb61 	bl	8000b7c <HAL_GetTick>
 80014ba:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	4b67      	ldr	r3, [pc, #412]	@ (800165c <HAL_RCC_OscConfig+0x438>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80014c4:	d1c8      	bne.n	8001458 <HAL_RCC_OscConfig+0x234>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c6:	f7ff fb59 	bl	8000b7c <HAL_GetTick>
 80014ca:	1b80      	subs	r0, r0, r6
 80014cc:	2802      	cmp	r0, #2
 80014ce:	d9f5      	bls.n	80014bc <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 80014d0:	2003      	movs	r0, #3
 80014d2:	e0b2      	b.n	800163a <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d4:	4a62      	ldr	r2, [pc, #392]	@ (8001660 <HAL_RCC_OscConfig+0x43c>)
 80014d6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80014de:	e7c9      	b.n	8001474 <HAL_RCC_OscConfig+0x250>
 80014e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001660 <HAL_RCC_OscConfig+0x43c>)
 80014e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80014e4:	f042 0204 	orr.w	r2, r2, #4
 80014e8:	671a      	str	r2, [r3, #112]	@ 0x70
 80014ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80014ec:	f042 0201 	orr.w	r2, r2, #1
 80014f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80014f2:	e7bf      	b.n	8001474 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f4:	f7ff fb42 	bl	8000b7c <HAL_GetTick>
 80014f8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fa:	4b59      	ldr	r3, [pc, #356]	@ (8001660 <HAL_RCC_OscConfig+0x43c>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014fe:	f013 0f02 	tst.w	r3, #2
 8001502:	d008      	beq.n	8001516 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001504:	f7ff fb3a 	bl	8000b7c <HAL_GetTick>
 8001508:	1b80      	subs	r0, r0, r6
 800150a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800150e:	4298      	cmp	r0, r3
 8001510:	d9f3      	bls.n	80014fa <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8001512:	2003      	movs	r0, #3
 8001514:	e091      	b.n	800163a <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001516:	b9ed      	cbnz	r5, 8001554 <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001518:	69a3      	ldr	r3, [r4, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 808c 	beq.w	8001638 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001520:	4a4f      	ldr	r2, [pc, #316]	@ (8001660 <HAL_RCC_OscConfig+0x43c>)
 8001522:	6892      	ldr	r2, [r2, #8]
 8001524:	f002 020c 	and.w	r2, r2, #12
 8001528:	2a08      	cmp	r2, #8
 800152a:	d054      	beq.n	80015d6 <HAL_RCC_OscConfig+0x3b2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152c:	2b02      	cmp	r3, #2
 800152e:	d017      	beq.n	8001560 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001530:	4b4c      	ldr	r3, [pc, #304]	@ (8001664 <HAL_RCC_OscConfig+0x440>)
 8001532:	2200      	movs	r2, #0
 8001534:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001536:	f7ff fb21 	bl	8000b7c <HAL_GetTick>
 800153a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153c:	4b48      	ldr	r3, [pc, #288]	@ (8001660 <HAL_RCC_OscConfig+0x43c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001544:	d045      	beq.n	80015d2 <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001546:	f7ff fb19 	bl	8000b7c <HAL_GetTick>
 800154a:	1b00      	subs	r0, r0, r4
 800154c:	2802      	cmp	r0, #2
 800154e:	d9f5      	bls.n	800153c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001550:	2003      	movs	r0, #3
 8001552:	e072      	b.n	800163a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001554:	4a42      	ldr	r2, [pc, #264]	@ (8001660 <HAL_RCC_OscConfig+0x43c>)
 8001556:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	@ 0x40
 800155e:	e7db      	b.n	8001518 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8001560:	4b40      	ldr	r3, [pc, #256]	@ (8001664 <HAL_RCC_OscConfig+0x440>)
 8001562:	2200      	movs	r2, #0
 8001564:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001566:	f7ff fb09 	bl	8000b7c <HAL_GetTick>
 800156a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156c:	4b3c      	ldr	r3, [pc, #240]	@ (8001660 <HAL_RCC_OscConfig+0x43c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001574:	d006      	beq.n	8001584 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001576:	f7ff fb01 	bl	8000b7c <HAL_GetTick>
 800157a:	1b40      	subs	r0, r0, r5
 800157c:	2802      	cmp	r0, #2
 800157e:	d9f5      	bls.n	800156c <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 8001580:	2003      	movs	r0, #3
 8001582:	e05a      	b.n	800163a <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001584:	69e3      	ldr	r3, [r4, #28]
 8001586:	6a22      	ldr	r2, [r4, #32]
 8001588:	4313      	orrs	r3, r2
 800158a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800158c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001590:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001592:	0852      	lsrs	r2, r2, #1
 8001594:	3a01      	subs	r2, #1
 8001596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800159a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800159c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80015a0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80015a2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80015a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001660 <HAL_RCC_OscConfig+0x43c>)
 80015a8:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80015aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001664 <HAL_RCC_OscConfig+0x440>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80015b0:	f7ff fae4 	bl	8000b7c <HAL_GetTick>
 80015b4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <HAL_RCC_OscConfig+0x43c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x3aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fadc 	bl	8000b7c <HAL_GetTick>
 80015c4:	1b00      	subs	r0, r0, r4
 80015c6:	2802      	cmp	r0, #2
 80015c8:	d9f5      	bls.n	80015b6 <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 80015ca:	2003      	movs	r0, #3
 80015cc:	e035      	b.n	800163a <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80015ce:	2000      	movs	r0, #0
 80015d0:	e033      	b.n	800163a <HAL_RCC_OscConfig+0x416>
 80015d2:	2000      	movs	r0, #0
 80015d4:	e031      	b.n	800163a <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d031      	beq.n	800163e <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 80015da:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <HAL_RCC_OscConfig+0x43c>)
 80015dc:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015de:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80015e2:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e4:	4291      	cmp	r1, r2
 80015e6:	d12c      	bne.n	8001642 <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015e8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015ec:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	428a      	cmp	r2, r1
 80015f0:	d129      	bne.n	8001646 <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015f2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015f4:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80015f8:	401a      	ands	r2, r3
 80015fa:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80015fe:	d124      	bne.n	800164a <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001600:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001604:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001606:	0852      	lsrs	r2, r2, #1
 8001608:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800160a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800160e:	d11e      	bne.n	800164e <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001610:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001614:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001616:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800161a:	d11a      	bne.n	8001652 <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800161c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8001620:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001622:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8001626:	d116      	bne.n	8001656 <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8001628:	2000      	movs	r0, #0
 800162a:	e006      	b.n	800163a <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 800162c:	2001      	movs	r0, #1
}
 800162e:	4770      	bx	lr
        return HAL_ERROR;
 8001630:	2001      	movs	r0, #1
 8001632:	e002      	b.n	800163a <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8001634:	2001      	movs	r0, #1
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8001638:	2000      	movs	r0, #0
}
 800163a:	b002      	add	sp, #8
 800163c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800163e:	2001      	movs	r0, #1
 8001640:	e7fb      	b.n	800163a <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8001642:	2001      	movs	r0, #1
 8001644:	e7f9      	b.n	800163a <HAL_RCC_OscConfig+0x416>
 8001646:	2001      	movs	r0, #1
 8001648:	e7f7      	b.n	800163a <HAL_RCC_OscConfig+0x416>
 800164a:	2001      	movs	r0, #1
 800164c:	e7f5      	b.n	800163a <HAL_RCC_OscConfig+0x416>
 800164e:	2001      	movs	r0, #1
 8001650:	e7f3      	b.n	800163a <HAL_RCC_OscConfig+0x416>
 8001652:	2001      	movs	r0, #1
 8001654:	e7f1      	b.n	800163a <HAL_RCC_OscConfig+0x416>
 8001656:	2001      	movs	r0, #1
 8001658:	e7ef      	b.n	800163a <HAL_RCC_OscConfig+0x416>
 800165a:	bf00      	nop
 800165c:	40007000 	.word	0x40007000
 8001660:	40023800 	.word	0x40023800
 8001664:	42470000 	.word	0x42470000

08001668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001668:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800166a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800166c:	6a04      	ldr	r4, [r0, #32]
 800166e:	f024 0401 	bic.w	r4, r4, #1
 8001672:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001674:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001676:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800167a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800167e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001682:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001684:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001686:	6203      	str	r3, [r0, #32]
}
 8001688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800168c:	4770      	bx	lr

0800168e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800168e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001690:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001692:	6a04      	ldr	r4, [r0, #32]
 8001694:	f024 0410 	bic.w	r4, r4, #16
 8001698:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800169a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800169c:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80016a0:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80016a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80016a8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80016ac:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80016ae:	6203      	str	r3, [r0, #32]
}
 80016b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80016b6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80016b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80016bc:	430b      	orrs	r3, r1
 80016be:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80016c2:	6083      	str	r3, [r0, #8]
}
 80016c4:	4770      	bx	lr
	...

080016c8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80016c8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d137      	bne.n	8001742 <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 80016d2:	2302      	movs	r3, #2
 80016d4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016d8:	6802      	ldr	r2, [r0, #0]
 80016da:	68d3      	ldr	r3, [r2, #12]
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016e2:	6803      	ldr	r3, [r0, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	@ (800174c <HAL_TIM_Base_Start_IT+0x84>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d020      	beq.n	800172c <HAL_TIM_Base_Start_IT+0x64>
 80016ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016ee:	d01d      	beq.n	800172c <HAL_TIM_Base_Start_IT+0x64>
 80016f0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d019      	beq.n	800172c <HAL_TIM_Base_Start_IT+0x64>
 80016f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d015      	beq.n	800172c <HAL_TIM_Base_Start_IT+0x64>
 8001700:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001704:	4293      	cmp	r3, r2
 8001706:	d011      	beq.n	800172c <HAL_TIM_Base_Start_IT+0x64>
 8001708:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800170c:	4293      	cmp	r3, r2
 800170e:	d00d      	beq.n	800172c <HAL_TIM_Base_Start_IT+0x64>
 8001710:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001714:	4293      	cmp	r3, r2
 8001716:	d009      	beq.n	800172c <HAL_TIM_Base_Start_IT+0x64>
 8001718:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800171c:	4293      	cmp	r3, r2
 800171e:	d005      	beq.n	800172c <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	f042 0201 	orr.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001728:	2000      	movs	r0, #0
 800172a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001732:	2a06      	cmp	r2, #6
 8001734:	d007      	beq.n	8001746 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	f042 0201 	orr.w	r2, r2, #1
 800173c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800173e:	2000      	movs	r0, #0
 8001740:	4770      	bx	lr
    return HAL_ERROR;
 8001742:	2001      	movs	r0, #1
 8001744:	4770      	bx	lr
  return HAL_OK;
 8001746:	2000      	movs	r0, #0
}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40010000 	.word	0x40010000

08001750 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001750:	4770      	bx	lr

08001752 <HAL_TIM_IC_CaptureCallback>:
}
 8001752:	4770      	bx	lr

08001754 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001754:	4770      	bx	lr

08001756 <HAL_TIM_TriggerCallback>:
}
 8001756:	4770      	bx	lr

08001758 <HAL_TIM_IRQHandler>:
{
 8001758:	b570      	push	{r4, r5, r6, lr}
 800175a:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800175c:	6803      	ldr	r3, [r0, #0]
 800175e:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001760:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001762:	f015 0f02 	tst.w	r5, #2
 8001766:	d010      	beq.n	800178a <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001768:	f016 0f02 	tst.w	r6, #2
 800176c:	d00d      	beq.n	800178a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800176e:	f06f 0202 	mvn.w	r2, #2
 8001772:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001774:	2301      	movs	r3, #1
 8001776:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001778:	6803      	ldr	r3, [r0, #0]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f013 0f03 	tst.w	r3, #3
 8001780:	d05e      	beq.n	8001840 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8001782:	f7ff ffe6 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001786:	2300      	movs	r3, #0
 8001788:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800178a:	f015 0f04 	tst.w	r5, #4
 800178e:	d012      	beq.n	80017b6 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001790:	f016 0f04 	tst.w	r6, #4
 8001794:	d00f      	beq.n	80017b6 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	f06f 0204 	mvn.w	r2, #4
 800179c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800179e:	2302      	movs	r3, #2
 80017a0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80017aa:	d04f      	beq.n	800184c <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80017ac:	4620      	mov	r0, r4
 80017ae:	f7ff ffd0 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b2:	2300      	movs	r3, #0
 80017b4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80017b6:	f015 0f08 	tst.w	r5, #8
 80017ba:	d012      	beq.n	80017e2 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80017bc:	f016 0f08 	tst.w	r6, #8
 80017c0:	d00f      	beq.n	80017e2 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80017c2:	6823      	ldr	r3, [r4, #0]
 80017c4:	f06f 0208 	mvn.w	r2, #8
 80017c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ca:	2304      	movs	r3, #4
 80017cc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017ce:	6823      	ldr	r3, [r4, #0]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f013 0f03 	tst.w	r3, #3
 80017d6:	d040      	beq.n	800185a <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80017d8:	4620      	mov	r0, r4
 80017da:	f7ff ffba 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017de:	2300      	movs	r3, #0
 80017e0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80017e2:	f015 0f10 	tst.w	r5, #16
 80017e6:	d012      	beq.n	800180e <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80017e8:	f016 0f10 	tst.w	r6, #16
 80017ec:	d00f      	beq.n	800180e <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80017ee:	6823      	ldr	r3, [r4, #0]
 80017f0:	f06f 0210 	mvn.w	r2, #16
 80017f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017f6:	2308      	movs	r3, #8
 80017f8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001802:	d031      	beq.n	8001868 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8001804:	4620      	mov	r0, r4
 8001806:	f7ff ffa4 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800180a:	2300      	movs	r3, #0
 800180c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800180e:	f015 0f01 	tst.w	r5, #1
 8001812:	d002      	beq.n	800181a <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001814:	f016 0f01 	tst.w	r6, #1
 8001818:	d12d      	bne.n	8001876 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800181a:	f015 0f80 	tst.w	r5, #128	@ 0x80
 800181e:	d002      	beq.n	8001826 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001820:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8001824:	d12f      	bne.n	8001886 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001826:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800182a:	d002      	beq.n	8001832 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800182c:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8001830:	d131      	bne.n	8001896 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001832:	f015 0f20 	tst.w	r5, #32
 8001836:	d002      	beq.n	800183e <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001838:	f016 0f20 	tst.w	r6, #32
 800183c:	d133      	bne.n	80018a6 <HAL_TIM_IRQHandler+0x14e>
}
 800183e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001840:	f7ff ff86 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001844:	4620      	mov	r0, r4
 8001846:	f7ff ff85 	bl	8001754 <HAL_TIM_PWM_PulseFinishedCallback>
 800184a:	e79c      	b.n	8001786 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800184c:	4620      	mov	r0, r4
 800184e:	f7ff ff7f 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001852:	4620      	mov	r0, r4
 8001854:	f7ff ff7e 	bl	8001754 <HAL_TIM_PWM_PulseFinishedCallback>
 8001858:	e7ab      	b.n	80017b2 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff ff78 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001860:	4620      	mov	r0, r4
 8001862:	f7ff ff77 	bl	8001754 <HAL_TIM_PWM_PulseFinishedCallback>
 8001866:	e7ba      	b.n	80017de <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001868:	4620      	mov	r0, r4
 800186a:	f7ff ff71 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800186e:	4620      	mov	r0, r4
 8001870:	f7ff ff70 	bl	8001754 <HAL_TIM_PWM_PulseFinishedCallback>
 8001874:	e7c9      	b.n	800180a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	f06f 0201 	mvn.w	r2, #1
 800187c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800187e:	4620      	mov	r0, r4
 8001880:	f7fe fef8 	bl	8000674 <HAL_TIM_PeriodElapsedCallback>
 8001884:	e7c9      	b.n	800181a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800188c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800188e:	4620      	mov	r0, r4
 8001890:	f000 f979 	bl	8001b86 <HAL_TIMEx_BreakCallback>
 8001894:	e7c7      	b.n	8001826 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800189c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800189e:	4620      	mov	r0, r4
 80018a0:	f7ff ff59 	bl	8001756 <HAL_TIM_TriggerCallback>
 80018a4:	e7c5      	b.n	8001832 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	f06f 0220 	mvn.w	r2, #32
 80018ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80018ae:	4620      	mov	r0, r4
 80018b0:	f000 f968 	bl	8001b84 <HAL_TIMEx_CommutCallback>
}
 80018b4:	e7c3      	b.n	800183e <HAL_TIM_IRQHandler+0xe6>
	...

080018b8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80018b8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018ba:	4a32      	ldr	r2, [pc, #200]	@ (8001984 <TIM_Base_SetConfig+0xcc>)
 80018bc:	4290      	cmp	r0, r2
 80018be:	d012      	beq.n	80018e6 <TIM_Base_SetConfig+0x2e>
 80018c0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80018c4:	d00f      	beq.n	80018e6 <TIM_Base_SetConfig+0x2e>
 80018c6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80018ca:	4290      	cmp	r0, r2
 80018cc:	d00b      	beq.n	80018e6 <TIM_Base_SetConfig+0x2e>
 80018ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018d2:	4290      	cmp	r0, r2
 80018d4:	d007      	beq.n	80018e6 <TIM_Base_SetConfig+0x2e>
 80018d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018da:	4290      	cmp	r0, r2
 80018dc:	d003      	beq.n	80018e6 <TIM_Base_SetConfig+0x2e>
 80018de:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80018e2:	4290      	cmp	r0, r2
 80018e4:	d103      	bne.n	80018ee <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80018ea:	684a      	ldr	r2, [r1, #4]
 80018ec:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018ee:	4a25      	ldr	r2, [pc, #148]	@ (8001984 <TIM_Base_SetConfig+0xcc>)
 80018f0:	4290      	cmp	r0, r2
 80018f2:	d02a      	beq.n	800194a <TIM_Base_SetConfig+0x92>
 80018f4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80018f8:	d027      	beq.n	800194a <TIM_Base_SetConfig+0x92>
 80018fa:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80018fe:	4290      	cmp	r0, r2
 8001900:	d023      	beq.n	800194a <TIM_Base_SetConfig+0x92>
 8001902:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001906:	4290      	cmp	r0, r2
 8001908:	d01f      	beq.n	800194a <TIM_Base_SetConfig+0x92>
 800190a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800190e:	4290      	cmp	r0, r2
 8001910:	d01b      	beq.n	800194a <TIM_Base_SetConfig+0x92>
 8001912:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001916:	4290      	cmp	r0, r2
 8001918:	d017      	beq.n	800194a <TIM_Base_SetConfig+0x92>
 800191a:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800191e:	4290      	cmp	r0, r2
 8001920:	d013      	beq.n	800194a <TIM_Base_SetConfig+0x92>
 8001922:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001926:	4290      	cmp	r0, r2
 8001928:	d00f      	beq.n	800194a <TIM_Base_SetConfig+0x92>
 800192a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800192e:	4290      	cmp	r0, r2
 8001930:	d00b      	beq.n	800194a <TIM_Base_SetConfig+0x92>
 8001932:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8001936:	4290      	cmp	r0, r2
 8001938:	d007      	beq.n	800194a <TIM_Base_SetConfig+0x92>
 800193a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800193e:	4290      	cmp	r0, r2
 8001940:	d003      	beq.n	800194a <TIM_Base_SetConfig+0x92>
 8001942:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001946:	4290      	cmp	r0, r2
 8001948:	d103      	bne.n	8001952 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800194a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800194e:	68ca      	ldr	r2, [r1, #12]
 8001950:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001952:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001956:	694a      	ldr	r2, [r1, #20]
 8001958:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 800195a:	688a      	ldr	r2, [r1, #8]
 800195c:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800195e:	680a      	ldr	r2, [r1, #0]
 8001960:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001962:	4a08      	ldr	r2, [pc, #32]	@ (8001984 <TIM_Base_SetConfig+0xcc>)
 8001964:	4290      	cmp	r0, r2
 8001966:	d003      	beq.n	8001970 <TIM_Base_SetConfig+0xb8>
 8001968:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800196c:	4290      	cmp	r0, r2
 800196e:	d101      	bne.n	8001974 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8001970:	690a      	ldr	r2, [r1, #16]
 8001972:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001974:	6802      	ldr	r2, [r0, #0]
 8001976:	f042 0204 	orr.w	r2, r2, #4
 800197a:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800197c:	2201      	movs	r2, #1
 800197e:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8001980:	6003      	str	r3, [r0, #0]
}
 8001982:	4770      	bx	lr
 8001984:	40010000 	.word	0x40010000

08001988 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001988:	b340      	cbz	r0, 80019dc <HAL_TIM_Base_Init+0x54>
{
 800198a:	b510      	push	{r4, lr}
 800198c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800198e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001992:	b1f3      	cbz	r3, 80019d2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001994:	2302      	movs	r3, #2
 8001996:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800199a:	4621      	mov	r1, r4
 800199c:	f851 0b04 	ldr.w	r0, [r1], #4
 80019a0:	f7ff ff8a 	bl	80018b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019aa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80019ae:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80019b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80019b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80019be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80019c2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80019c6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80019ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80019ce:	2000      	movs	r0, #0
}
 80019d0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80019d2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80019d6:	f7fe ff7d 	bl	80008d4 <HAL_TIM_Base_MspInit>
 80019da:	e7db      	b.n	8001994 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80019dc:	2001      	movs	r0, #1
}
 80019de:	4770      	bx	lr

080019e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80019e0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80019e2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019e4:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019e8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80019ec:	430a      	orrs	r2, r1
 80019ee:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019f2:	6082      	str	r2, [r0, #8]
}
 80019f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80019fa:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d078      	beq.n	8001af4 <HAL_TIM_ConfigClockSource+0xfa>
{
 8001a02:	b510      	push	{r4, lr}
 8001a04:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001a06:	2301      	movs	r3, #1
 8001a08:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001a12:	6802      	ldr	r2, [r0, #0]
 8001a14:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001a1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001a1e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001a20:	680b      	ldr	r3, [r1, #0]
 8001a22:	2b60      	cmp	r3, #96	@ 0x60
 8001a24:	d04c      	beq.n	8001ac0 <HAL_TIM_ConfigClockSource+0xc6>
 8001a26:	d829      	bhi.n	8001a7c <HAL_TIM_ConfigClockSource+0x82>
 8001a28:	2b40      	cmp	r3, #64	@ 0x40
 8001a2a:	d054      	beq.n	8001ad6 <HAL_TIM_ConfigClockSource+0xdc>
 8001a2c:	d90c      	bls.n	8001a48 <HAL_TIM_ConfigClockSource+0x4e>
 8001a2e:	2b50      	cmp	r3, #80	@ 0x50
 8001a30:	d122      	bne.n	8001a78 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a32:	68ca      	ldr	r2, [r1, #12]
 8001a34:	6849      	ldr	r1, [r1, #4]
 8001a36:	6800      	ldr	r0, [r0, #0]
 8001a38:	f7ff fe16 	bl	8001668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a3c:	2150      	movs	r1, #80	@ 0x50
 8001a3e:	6820      	ldr	r0, [r4, #0]
 8001a40:	f7ff fe39 	bl	80016b6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001a44:	2000      	movs	r0, #0
      break;
 8001a46:	e005      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001a48:	2b20      	cmp	r3, #32
 8001a4a:	d00d      	beq.n	8001a68 <HAL_TIM_ConfigClockSource+0x6e>
 8001a4c:	d909      	bls.n	8001a62 <HAL_TIM_ConfigClockSource+0x68>
 8001a4e:	2b30      	cmp	r3, #48	@ 0x30
 8001a50:	d00a      	beq.n	8001a68 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8001a52:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001a60:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8001a62:	b10b      	cbz	r3, 8001a68 <HAL_TIM_ConfigClockSource+0x6e>
 8001a64:	2b10      	cmp	r3, #16
 8001a66:	d105      	bne.n	8001a74 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a68:	4619      	mov	r1, r3
 8001a6a:	6820      	ldr	r0, [r4, #0]
 8001a6c:	f7ff fe23 	bl	80016b6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001a70:	2000      	movs	r0, #0
      break;
 8001a72:	e7ef      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8001a74:	2001      	movs	r0, #1
 8001a76:	e7ed      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x5a>
 8001a78:	2001      	movs	r0, #1
 8001a7a:	e7eb      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a80:	d034      	beq.n	8001aec <HAL_TIM_ConfigClockSource+0xf2>
 8001a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a86:	d10c      	bne.n	8001aa2 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8001a88:	68cb      	ldr	r3, [r1, #12]
 8001a8a:	684a      	ldr	r2, [r1, #4]
 8001a8c:	6889      	ldr	r1, [r1, #8]
 8001a8e:	6800      	ldr	r0, [r0, #0]
 8001a90:	f7ff ffa6 	bl	80019e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a94:	6822      	ldr	r2, [r4, #0]
 8001a96:	6893      	ldr	r3, [r2, #8]
 8001a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a9c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001a9e:	2000      	movs	r0, #0
      break;
 8001aa0:	e7d8      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001aa2:	2b70      	cmp	r3, #112	@ 0x70
 8001aa4:	d124      	bne.n	8001af0 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8001aa6:	68cb      	ldr	r3, [r1, #12]
 8001aa8:	684a      	ldr	r2, [r1, #4]
 8001aaa:	6889      	ldr	r1, [r1, #8]
 8001aac:	6800      	ldr	r0, [r0, #0]
 8001aae:	f7ff ff97 	bl	80019e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ab2:	6822      	ldr	r2, [r4, #0]
 8001ab4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ab6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001aba:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001abc:	2000      	movs	r0, #0
      break;
 8001abe:	e7c9      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ac0:	68ca      	ldr	r2, [r1, #12]
 8001ac2:	6849      	ldr	r1, [r1, #4]
 8001ac4:	6800      	ldr	r0, [r0, #0]
 8001ac6:	f7ff fde2 	bl	800168e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001aca:	2160      	movs	r1, #96	@ 0x60
 8001acc:	6820      	ldr	r0, [r4, #0]
 8001ace:	f7ff fdf2 	bl	80016b6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001ad2:	2000      	movs	r0, #0
      break;
 8001ad4:	e7be      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ad6:	68ca      	ldr	r2, [r1, #12]
 8001ad8:	6849      	ldr	r1, [r1, #4]
 8001ada:	6800      	ldr	r0, [r0, #0]
 8001adc:	f7ff fdc4 	bl	8001668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ae0:	2140      	movs	r1, #64	@ 0x40
 8001ae2:	6820      	ldr	r0, [r4, #0]
 8001ae4:	f7ff fde7 	bl	80016b6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001ae8:	2000      	movs	r0, #0
      break;
 8001aea:	e7b3      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001aec:	2000      	movs	r0, #0
 8001aee:	e7b1      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8001af0:	2001      	movs	r0, #1
 8001af2:	e7af      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8001af4:	2002      	movs	r0, #2
}
 8001af6:	4770      	bx	lr

08001af8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001af8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001afc:	2a01      	cmp	r2, #1
 8001afe:	d03d      	beq.n	8001b7c <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8001b00:	b410      	push	{r4}
 8001b02:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001b04:	2201      	movs	r2, #1
 8001b06:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b10:	6802      	ldr	r2, [r0, #0]
 8001b12:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b14:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b16:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b1a:	6808      	ldr	r0, [r1, #0]
 8001b1c:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b20:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4816      	ldr	r0, [pc, #88]	@ (8001b80 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8001b26:	4282      	cmp	r2, r0
 8001b28:	d01a      	beq.n	8001b60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001b2a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001b2e:	d017      	beq.n	8001b60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001b30:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8001b34:	4282      	cmp	r2, r0
 8001b36:	d013      	beq.n	8001b60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001b38:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001b3c:	4282      	cmp	r2, r0
 8001b3e:	d00f      	beq.n	8001b60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001b40:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001b44:	4282      	cmp	r2, r0
 8001b46:	d00b      	beq.n	8001b60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001b48:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8001b4c:	4282      	cmp	r2, r0
 8001b4e:	d007      	beq.n	8001b60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001b50:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8001b54:	4282      	cmp	r2, r0
 8001b56:	d003      	beq.n	8001b60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001b58:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8001b5c:	4282      	cmp	r2, r0
 8001b5e:	d104      	bne.n	8001b6a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001b60:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b64:	6849      	ldr	r1, [r1, #4]
 8001b66:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001b68:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8001b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b7a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001b7c:	2002      	movs	r0, #2
}
 8001b7e:	4770      	bx	lr
 8001b80:	40010000 	.word	0x40010000

08001b84 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b84:	4770      	bx	lr

08001b86 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b86:	4770      	bx	lr

08001b88 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b88:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b8a:	f102 030c 	add.w	r3, r2, #12
 8001b8e:	e853 3f00 	ldrex	r3, [r3]
 8001b92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b96:	320c      	adds	r2, #12
 8001b98:	e842 3100 	strex	r1, r3, [r2]
 8001b9c:	2900      	cmp	r1, #0
 8001b9e:	d1f3      	bne.n	8001b88 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ba0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ba2:	f102 0314 	add.w	r3, r2, #20
 8001ba6:	e853 3f00 	ldrex	r3, [r3]
 8001baa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bae:	3214      	adds	r2, #20
 8001bb0:	e842 3100 	strex	r1, r3, [r2]
 8001bb4:	2900      	cmp	r1, #0
 8001bb6:	d1f3      	bne.n	8001ba0 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001bb8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d005      	beq.n	8001bca <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001bbe:	2320      	movs	r3, #32
 8001bc0:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001bc8:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bcc:	f102 030c 	add.w	r3, r2, #12
 8001bd0:	e853 3f00 	ldrex	r3, [r3]
 8001bd4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bd8:	320c      	adds	r2, #12
 8001bda:	e842 3100 	strex	r1, r3, [r2]
 8001bde:	2900      	cmp	r1, #0
 8001be0:	d1f3      	bne.n	8001bca <UART_EndRxTransfer+0x42>
 8001be2:	e7ec      	b.n	8001bbe <UART_EndRxTransfer+0x36>

08001be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001be4:	b510      	push	{r4, lr}
 8001be6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001be8:	6802      	ldr	r2, [r0, #0]
 8001bea:	6913      	ldr	r3, [r2, #16]
 8001bec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bf0:	68c1      	ldr	r1, [r0, #12]
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bf6:	6883      	ldr	r3, [r0, #8]
 8001bf8:	6902      	ldr	r2, [r0, #16]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	6943      	ldr	r3, [r0, #20]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	69c3      	ldr	r3, [r0, #28]
 8001c02:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001c04:	6801      	ldr	r1, [r0, #0]
 8001c06:	68cb      	ldr	r3, [r1, #12]
 8001c08:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001c0c:	f023 030c 	bic.w	r3, r3, #12
 8001c10:	4313      	orrs	r3, r2
 8001c12:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c14:	6802      	ldr	r2, [r0, #0]
 8001c16:	6953      	ldr	r3, [r2, #20]
 8001c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c1c:	6981      	ldr	r1, [r0, #24]
 8001c1e:	430b      	orrs	r3, r1
 8001c20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c22:	6803      	ldr	r3, [r0, #0]
 8001c24:	4a31      	ldr	r2, [pc, #196]	@ (8001cec <UART_SetConfig+0x108>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d006      	beq.n	8001c38 <UART_SetConfig+0x54>
 8001c2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d002      	beq.n	8001c38 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c32:	f7ff fa0f 	bl	8001054 <HAL_RCC_GetPCLK1Freq>
 8001c36:	e001      	b.n	8001c3c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c38:	f7ff fa1c 	bl	8001074 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c3c:	69e3      	ldr	r3, [r4, #28]
 8001c3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c42:	d029      	beq.n	8001c98 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c44:	2100      	movs	r1, #0
 8001c46:	1803      	adds	r3, r0, r0
 8001c48:	4149      	adcs	r1, r1
 8001c4a:	181b      	adds	r3, r3, r0
 8001c4c:	f141 0100 	adc.w	r1, r1, #0
 8001c50:	00c9      	lsls	r1, r1, #3
 8001c52:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	1818      	adds	r0, r3, r0
 8001c5a:	6863      	ldr	r3, [r4, #4]
 8001c5c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001c60:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001c64:	f141 0100 	adc.w	r1, r1, #0
 8001c68:	f7fe fb22 	bl	80002b0 <__aeabi_uldivmod>
 8001c6c:	4a20      	ldr	r2, [pc, #128]	@ (8001cf0 <UART_SetConfig+0x10c>)
 8001c6e:	fba2 3100 	umull	r3, r1, r2, r0
 8001c72:	0949      	lsrs	r1, r1, #5
 8001c74:	2364      	movs	r3, #100	@ 0x64
 8001c76:	fb03 0311 	mls	r3, r3, r1, r0
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	3332      	adds	r3, #50	@ 0x32
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c88:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	6821      	ldr	r1, [r4, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }
}
 8001c96:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c98:	2300      	movs	r3, #0
 8001c9a:	1802      	adds	r2, r0, r0
 8001c9c:	eb43 0103 	adc.w	r1, r3, r3
 8001ca0:	1812      	adds	r2, r2, r0
 8001ca2:	f141 0100 	adc.w	r1, r1, #0
 8001ca6:	00c9      	lsls	r1, r1, #3
 8001ca8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cac:	00d2      	lsls	r2, r2, #3
 8001cae:	1810      	adds	r0, r2, r0
 8001cb0:	f141 0100 	adc.w	r1, r1, #0
 8001cb4:	6862      	ldr	r2, [r4, #4]
 8001cb6:	1892      	adds	r2, r2, r2
 8001cb8:	415b      	adcs	r3, r3
 8001cba:	f7fe faf9 	bl	80002b0 <__aeabi_uldivmod>
 8001cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf0 <UART_SetConfig+0x10c>)
 8001cc0:	fba2 3100 	umull	r3, r1, r2, r0
 8001cc4:	0949      	lsrs	r1, r1, #5
 8001cc6:	2364      	movs	r3, #100	@ 0x64
 8001cc8:	fb03 0311 	mls	r3, r3, r1, r0
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	3332      	adds	r3, #50	@ 0x32
 8001cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd4:	095b      	lsrs	r3, r3, #5
 8001cd6:	005a      	lsls	r2, r3, #1
 8001cd8:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001cdc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	6821      	ldr	r1, [r4, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
 8001cea:	e7d4      	b.n	8001c96 <UART_SetConfig+0xb2>
 8001cec:	40011000 	.word	0x40011000
 8001cf0:	51eb851f 	.word	0x51eb851f

08001cf4 <UART_WaitOnFlagUntilTimeout>:
{
 8001cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	4605      	mov	r5, r0
 8001cfc:	460e      	mov	r6, r1
 8001cfe:	4617      	mov	r7, r2
 8001d00:	4699      	mov	r9, r3
 8001d02:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d06:	682b      	ldr	r3, [r5, #0]
 8001d08:	681c      	ldr	r4, [r3, #0]
 8001d0a:	ea36 0404 	bics.w	r4, r6, r4
 8001d0e:	bf0c      	ite	eq
 8001d10:	2401      	moveq	r4, #1
 8001d12:	2400      	movne	r4, #0
 8001d14:	42bc      	cmp	r4, r7
 8001d16:	d128      	bne.n	8001d6a <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001d18:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001d1c:	d0f3      	beq.n	8001d06 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d1e:	f7fe ff2d 	bl	8000b7c <HAL_GetTick>
 8001d22:	eba0 0009 	sub.w	r0, r0, r9
 8001d26:	4540      	cmp	r0, r8
 8001d28:	d823      	bhi.n	8001d72 <UART_WaitOnFlagUntilTimeout+0x7e>
 8001d2a:	f1b8 0f00 	cmp.w	r8, #0
 8001d2e:	d022      	beq.n	8001d76 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	f012 0f04 	tst.w	r2, #4
 8001d38:	d0e5      	beq.n	8001d06 <UART_WaitOnFlagUntilTimeout+0x12>
 8001d3a:	2e80      	cmp	r6, #128	@ 0x80
 8001d3c:	d0e3      	beq.n	8001d06 <UART_WaitOnFlagUntilTimeout+0x12>
 8001d3e:	2e40      	cmp	r6, #64	@ 0x40
 8001d40:	d0e1      	beq.n	8001d06 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	f012 0f08 	tst.w	r2, #8
 8001d48:	d0dd      	beq.n	8001d06 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001d4a:	2400      	movs	r4, #0
 8001d4c:	9401      	str	r4, [sp, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	9201      	str	r2, [sp, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f7ff ff15 	bl	8001b88 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d5e:	2308      	movs	r3, #8
 8001d60:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8001d62:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8001d66:	2001      	movs	r0, #1
 8001d68:	e000      	b.n	8001d6c <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8001d6a:	2000      	movs	r0, #0
}
 8001d6c:	b003      	add	sp, #12
 8001d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8001d72:	2003      	movs	r0, #3
 8001d74:	e7fa      	b.n	8001d6c <UART_WaitOnFlagUntilTimeout+0x78>
 8001d76:	2003      	movs	r0, #3
 8001d78:	e7f8      	b.n	8001d6c <UART_WaitOnFlagUntilTimeout+0x78>

08001d7a <HAL_UART_Init>:
  if (huart == NULL)
 8001d7a:	b360      	cbz	r0, 8001dd6 <HAL_UART_Init+0x5c>
{
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001d80:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001d84:	b313      	cbz	r3, 8001dcc <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001d86:	2324      	movs	r3, #36	@ 0x24
 8001d88:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001d8c:	6822      	ldr	r2, [r4, #0]
 8001d8e:	68d3      	ldr	r3, [r2, #12]
 8001d90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001d94:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d96:	4620      	mov	r0, r4
 8001d98:	f7ff ff24 	bl	8001be4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d9c:	6822      	ldr	r2, [r4, #0]
 8001d9e:	6913      	ldr	r3, [r2, #16]
 8001da0:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001da4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001da6:	6822      	ldr	r2, [r4, #0]
 8001da8:	6953      	ldr	r3, [r2, #20]
 8001daa:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001dae:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001db0:	6822      	ldr	r2, [r4, #0]
 8001db2:	68d3      	ldr	r3, [r2, #12]
 8001db4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001db8:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dba:	2000      	movs	r0, #0
 8001dbc:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001dc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001dc8:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001dca:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001dcc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001dd0:	f7fe fd9e 	bl	8000910 <HAL_UART_MspInit>
 8001dd4:	e7d7      	b.n	8001d86 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001dd6:	2001      	movs	r0, #1
}
 8001dd8:	4770      	bx	lr

08001dda <HAL_UART_Transmit>:
{
 8001dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001de2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d156      	bne.n	8001e9a <HAL_UART_Transmit+0xc0>
 8001dec:	4604      	mov	r4, r0
 8001dee:	460d      	mov	r5, r1
 8001df0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001df2:	2900      	cmp	r1, #0
 8001df4:	d055      	beq.n	8001ea2 <HAL_UART_Transmit+0xc8>
 8001df6:	b90a      	cbnz	r2, 8001dfc <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8001df8:	2001      	movs	r0, #1
 8001dfa:	e04f      	b.n	8001e9c <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e00:	2321      	movs	r3, #33	@ 0x21
 8001e02:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001e06:	f7fe feb9 	bl	8000b7c <HAL_GetTick>
 8001e0a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001e0c:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e10:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e14:	68a3      	ldr	r3, [r4, #8]
 8001e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e1a:	d002      	beq.n	8001e22 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8001e1c:	f04f 0800 	mov.w	r8, #0
 8001e20:	e014      	b.n	8001e4c <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e22:	6923      	ldr	r3, [r4, #16]
 8001e24:	b32b      	cbz	r3, 8001e72 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8001e26:	f04f 0800 	mov.w	r8, #0
 8001e2a:	e00f      	b.n	8001e4c <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8001e32:	2003      	movs	r0, #3
 8001e34:	e032      	b.n	8001e9c <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e36:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001e3a:	6822      	ldr	r2, [r4, #0]
 8001e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e40:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001e42:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001e44:	b292      	uxth	r2, r2
 8001e46:	3a01      	subs	r2, #1
 8001e48:	b292      	uxth	r2, r2
 8001e4a:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001e4c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	b193      	cbz	r3, 8001e78 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e52:	9600      	str	r6, [sp, #0]
 8001e54:	463b      	mov	r3, r7
 8001e56:	2200      	movs	r2, #0
 8001e58:	2180      	movs	r1, #128	@ 0x80
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f7ff ff4a 	bl	8001cf4 <UART_WaitOnFlagUntilTimeout>
 8001e60:	2800      	cmp	r0, #0
 8001e62:	d1e3      	bne.n	8001e2c <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8001e64:	2d00      	cmp	r5, #0
 8001e66:	d0e6      	beq.n	8001e36 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e68:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e70:	e7e7      	b.n	8001e42 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8001e72:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001e74:	2500      	movs	r5, #0
 8001e76:	e7e9      	b.n	8001e4c <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e78:	9600      	str	r6, [sp, #0]
 8001e7a:	463b      	mov	r3, r7
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2140      	movs	r1, #64	@ 0x40
 8001e80:	4620      	mov	r0, r4
 8001e82:	f7ff ff37 	bl	8001cf4 <UART_WaitOnFlagUntilTimeout>
 8001e86:	b918      	cbnz	r0, 8001e90 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8001e88:	2320      	movs	r3, #32
 8001e8a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001e8e:	e005      	b.n	8001e9c <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8001e90:	2320      	movs	r3, #32
 8001e92:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8001e96:	2003      	movs	r0, #3
 8001e98:	e000      	b.n	8001e9c <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8001e9a:	2002      	movs	r0, #2
}
 8001e9c:	b002      	add	sp, #8
 8001e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	e7fa      	b.n	8001e9c <HAL_UART_Transmit+0xc2>
	...

08001ea8 <std>:
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	b510      	push	{r4, lr}
 8001eac:	4604      	mov	r4, r0
 8001eae:	e9c0 3300 	strd	r3, r3, [r0]
 8001eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001eb6:	6083      	str	r3, [r0, #8]
 8001eb8:	8181      	strh	r1, [r0, #12]
 8001eba:	6643      	str	r3, [r0, #100]	@ 0x64
 8001ebc:	81c2      	strh	r2, [r0, #14]
 8001ebe:	6183      	str	r3, [r0, #24]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	305c      	adds	r0, #92	@ 0x5c
 8001ec6:	f000 f906 	bl	80020d6 <memset>
 8001eca:	4b0d      	ldr	r3, [pc, #52]	@ (8001f00 <std+0x58>)
 8001ecc:	6263      	str	r3, [r4, #36]	@ 0x24
 8001ece:	4b0d      	ldr	r3, [pc, #52]	@ (8001f04 <std+0x5c>)
 8001ed0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <std+0x60>)
 8001ed4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f0c <std+0x64>)
 8001ed8:	6323      	str	r3, [r4, #48]	@ 0x30
 8001eda:	4b0d      	ldr	r3, [pc, #52]	@ (8001f10 <std+0x68>)
 8001edc:	6224      	str	r4, [r4, #32]
 8001ede:	429c      	cmp	r4, r3
 8001ee0:	d006      	beq.n	8001ef0 <std+0x48>
 8001ee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001ee6:	4294      	cmp	r4, r2
 8001ee8:	d002      	beq.n	8001ef0 <std+0x48>
 8001eea:	33d0      	adds	r3, #208	@ 0xd0
 8001eec:	429c      	cmp	r4, r3
 8001eee:	d105      	bne.n	8001efc <std+0x54>
 8001ef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ef8:	f000 b966 	b.w	80021c8 <__retarget_lock_init_recursive>
 8001efc:	bd10      	pop	{r4, pc}
 8001efe:	bf00      	nop
 8001f00:	08002051 	.word	0x08002051
 8001f04:	08002073 	.word	0x08002073
 8001f08:	080020ab 	.word	0x080020ab
 8001f0c:	080020cf 	.word	0x080020cf
 8001f10:	20000168 	.word	0x20000168

08001f14 <stdio_exit_handler>:
 8001f14:	4a02      	ldr	r2, [pc, #8]	@ (8001f20 <stdio_exit_handler+0xc>)
 8001f16:	4903      	ldr	r1, [pc, #12]	@ (8001f24 <stdio_exit_handler+0x10>)
 8001f18:	4803      	ldr	r0, [pc, #12]	@ (8001f28 <stdio_exit_handler+0x14>)
 8001f1a:	f000 b869 	b.w	8001ff0 <_fwalk_sglue>
 8001f1e:	bf00      	nop
 8001f20:	2000000c 	.word	0x2000000c
 8001f24:	08002a69 	.word	0x08002a69
 8001f28:	2000001c 	.word	0x2000001c

08001f2c <cleanup_stdio>:
 8001f2c:	6841      	ldr	r1, [r0, #4]
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <cleanup_stdio+0x34>)
 8001f30:	4299      	cmp	r1, r3
 8001f32:	b510      	push	{r4, lr}
 8001f34:	4604      	mov	r4, r0
 8001f36:	d001      	beq.n	8001f3c <cleanup_stdio+0x10>
 8001f38:	f000 fd96 	bl	8002a68 <_fflush_r>
 8001f3c:	68a1      	ldr	r1, [r4, #8]
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <cleanup_stdio+0x38>)
 8001f40:	4299      	cmp	r1, r3
 8001f42:	d002      	beq.n	8001f4a <cleanup_stdio+0x1e>
 8001f44:	4620      	mov	r0, r4
 8001f46:	f000 fd8f 	bl	8002a68 <_fflush_r>
 8001f4a:	68e1      	ldr	r1, [r4, #12]
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <cleanup_stdio+0x3c>)
 8001f4e:	4299      	cmp	r1, r3
 8001f50:	d004      	beq.n	8001f5c <cleanup_stdio+0x30>
 8001f52:	4620      	mov	r0, r4
 8001f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f58:	f000 bd86 	b.w	8002a68 <_fflush_r>
 8001f5c:	bd10      	pop	{r4, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000168 	.word	0x20000168
 8001f64:	200001d0 	.word	0x200001d0
 8001f68:	20000238 	.word	0x20000238

08001f6c <global_stdio_init.part.0>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f9c <global_stdio_init.part.0+0x30>)
 8001f70:	4c0b      	ldr	r4, [pc, #44]	@ (8001fa0 <global_stdio_init.part.0+0x34>)
 8001f72:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa4 <global_stdio_init.part.0+0x38>)
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	4620      	mov	r0, r4
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	f7ff ff94 	bl	8001ea8 <std>
 8001f80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001f84:	2201      	movs	r2, #1
 8001f86:	2109      	movs	r1, #9
 8001f88:	f7ff ff8e 	bl	8001ea8 <std>
 8001f8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001f90:	2202      	movs	r2, #2
 8001f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f96:	2112      	movs	r1, #18
 8001f98:	f7ff bf86 	b.w	8001ea8 <std>
 8001f9c:	200002a0 	.word	0x200002a0
 8001fa0:	20000168 	.word	0x20000168
 8001fa4:	08001f15 	.word	0x08001f15

08001fa8 <__sfp_lock_acquire>:
 8001fa8:	4801      	ldr	r0, [pc, #4]	@ (8001fb0 <__sfp_lock_acquire+0x8>)
 8001faa:	f000 b90e 	b.w	80021ca <__retarget_lock_acquire_recursive>
 8001fae:	bf00      	nop
 8001fb0:	200002a9 	.word	0x200002a9

08001fb4 <__sfp_lock_release>:
 8001fb4:	4801      	ldr	r0, [pc, #4]	@ (8001fbc <__sfp_lock_release+0x8>)
 8001fb6:	f000 b909 	b.w	80021cc <__retarget_lock_release_recursive>
 8001fba:	bf00      	nop
 8001fbc:	200002a9 	.word	0x200002a9

08001fc0 <__sinit>:
 8001fc0:	b510      	push	{r4, lr}
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	f7ff fff0 	bl	8001fa8 <__sfp_lock_acquire>
 8001fc8:	6a23      	ldr	r3, [r4, #32]
 8001fca:	b11b      	cbz	r3, 8001fd4 <__sinit+0x14>
 8001fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fd0:	f7ff bff0 	b.w	8001fb4 <__sfp_lock_release>
 8001fd4:	4b04      	ldr	r3, [pc, #16]	@ (8001fe8 <__sinit+0x28>)
 8001fd6:	6223      	str	r3, [r4, #32]
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <__sinit+0x2c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f5      	bne.n	8001fcc <__sinit+0xc>
 8001fe0:	f7ff ffc4 	bl	8001f6c <global_stdio_init.part.0>
 8001fe4:	e7f2      	b.n	8001fcc <__sinit+0xc>
 8001fe6:	bf00      	nop
 8001fe8:	08001f2d 	.word	0x08001f2d
 8001fec:	200002a0 	.word	0x200002a0

08001ff0 <_fwalk_sglue>:
 8001ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ff4:	4607      	mov	r7, r0
 8001ff6:	4688      	mov	r8, r1
 8001ff8:	4614      	mov	r4, r2
 8001ffa:	2600      	movs	r6, #0
 8001ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002000:	f1b9 0901 	subs.w	r9, r9, #1
 8002004:	d505      	bpl.n	8002012 <_fwalk_sglue+0x22>
 8002006:	6824      	ldr	r4, [r4, #0]
 8002008:	2c00      	cmp	r4, #0
 800200a:	d1f7      	bne.n	8001ffc <_fwalk_sglue+0xc>
 800200c:	4630      	mov	r0, r6
 800200e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002012:	89ab      	ldrh	r3, [r5, #12]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d907      	bls.n	8002028 <_fwalk_sglue+0x38>
 8002018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800201c:	3301      	adds	r3, #1
 800201e:	d003      	beq.n	8002028 <_fwalk_sglue+0x38>
 8002020:	4629      	mov	r1, r5
 8002022:	4638      	mov	r0, r7
 8002024:	47c0      	blx	r8
 8002026:	4306      	orrs	r6, r0
 8002028:	3568      	adds	r5, #104	@ 0x68
 800202a:	e7e9      	b.n	8002000 <_fwalk_sglue+0x10>

0800202c <iprintf>:
 800202c:	b40f      	push	{r0, r1, r2, r3}
 800202e:	b507      	push	{r0, r1, r2, lr}
 8002030:	4906      	ldr	r1, [pc, #24]	@ (800204c <iprintf+0x20>)
 8002032:	ab04      	add	r3, sp, #16
 8002034:	6808      	ldr	r0, [r1, #0]
 8002036:	f853 2b04 	ldr.w	r2, [r3], #4
 800203a:	6881      	ldr	r1, [r0, #8]
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	f000 f9e9 	bl	8002414 <_vfiprintf_r>
 8002042:	b003      	add	sp, #12
 8002044:	f85d eb04 	ldr.w	lr, [sp], #4
 8002048:	b004      	add	sp, #16
 800204a:	4770      	bx	lr
 800204c:	20000018 	.word	0x20000018

08002050 <__sread>:
 8002050:	b510      	push	{r4, lr}
 8002052:	460c      	mov	r4, r1
 8002054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002058:	f000 f868 	bl	800212c <_read_r>
 800205c:	2800      	cmp	r0, #0
 800205e:	bfab      	itete	ge
 8002060:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002062:	89a3      	ldrhlt	r3, [r4, #12]
 8002064:	181b      	addge	r3, r3, r0
 8002066:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800206a:	bfac      	ite	ge
 800206c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800206e:	81a3      	strhlt	r3, [r4, #12]
 8002070:	bd10      	pop	{r4, pc}

08002072 <__swrite>:
 8002072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002076:	461f      	mov	r7, r3
 8002078:	898b      	ldrh	r3, [r1, #12]
 800207a:	05db      	lsls	r3, r3, #23
 800207c:	4605      	mov	r5, r0
 800207e:	460c      	mov	r4, r1
 8002080:	4616      	mov	r6, r2
 8002082:	d505      	bpl.n	8002090 <__swrite+0x1e>
 8002084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002088:	2302      	movs	r3, #2
 800208a:	2200      	movs	r2, #0
 800208c:	f000 f83c 	bl	8002108 <_lseek_r>
 8002090:	89a3      	ldrh	r3, [r4, #12]
 8002092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002096:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800209a:	81a3      	strh	r3, [r4, #12]
 800209c:	4632      	mov	r2, r6
 800209e:	463b      	mov	r3, r7
 80020a0:	4628      	mov	r0, r5
 80020a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020a6:	f000 b853 	b.w	8002150 <_write_r>

080020aa <__sseek>:
 80020aa:	b510      	push	{r4, lr}
 80020ac:	460c      	mov	r4, r1
 80020ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020b2:	f000 f829 	bl	8002108 <_lseek_r>
 80020b6:	1c43      	adds	r3, r0, #1
 80020b8:	89a3      	ldrh	r3, [r4, #12]
 80020ba:	bf15      	itete	ne
 80020bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80020be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80020c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80020c6:	81a3      	strheq	r3, [r4, #12]
 80020c8:	bf18      	it	ne
 80020ca:	81a3      	strhne	r3, [r4, #12]
 80020cc:	bd10      	pop	{r4, pc}

080020ce <__sclose>:
 80020ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020d2:	f000 b809 	b.w	80020e8 <_close_r>

080020d6 <memset>:
 80020d6:	4402      	add	r2, r0
 80020d8:	4603      	mov	r3, r0
 80020da:	4293      	cmp	r3, r2
 80020dc:	d100      	bne.n	80020e0 <memset+0xa>
 80020de:	4770      	bx	lr
 80020e0:	f803 1b01 	strb.w	r1, [r3], #1
 80020e4:	e7f9      	b.n	80020da <memset+0x4>
	...

080020e8 <_close_r>:
 80020e8:	b538      	push	{r3, r4, r5, lr}
 80020ea:	4d06      	ldr	r5, [pc, #24]	@ (8002104 <_close_r+0x1c>)
 80020ec:	2300      	movs	r3, #0
 80020ee:	4604      	mov	r4, r0
 80020f0:	4608      	mov	r0, r1
 80020f2:	602b      	str	r3, [r5, #0]
 80020f4:	f7fe fc92 	bl	8000a1c <_close>
 80020f8:	1c43      	adds	r3, r0, #1
 80020fa:	d102      	bne.n	8002102 <_close_r+0x1a>
 80020fc:	682b      	ldr	r3, [r5, #0]
 80020fe:	b103      	cbz	r3, 8002102 <_close_r+0x1a>
 8002100:	6023      	str	r3, [r4, #0]
 8002102:	bd38      	pop	{r3, r4, r5, pc}
 8002104:	200002a4 	.word	0x200002a4

08002108 <_lseek_r>:
 8002108:	b538      	push	{r3, r4, r5, lr}
 800210a:	4d07      	ldr	r5, [pc, #28]	@ (8002128 <_lseek_r+0x20>)
 800210c:	4604      	mov	r4, r0
 800210e:	4608      	mov	r0, r1
 8002110:	4611      	mov	r1, r2
 8002112:	2200      	movs	r2, #0
 8002114:	602a      	str	r2, [r5, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	f7fe fc8a 	bl	8000a30 <_lseek>
 800211c:	1c43      	adds	r3, r0, #1
 800211e:	d102      	bne.n	8002126 <_lseek_r+0x1e>
 8002120:	682b      	ldr	r3, [r5, #0]
 8002122:	b103      	cbz	r3, 8002126 <_lseek_r+0x1e>
 8002124:	6023      	str	r3, [r4, #0]
 8002126:	bd38      	pop	{r3, r4, r5, pc}
 8002128:	200002a4 	.word	0x200002a4

0800212c <_read_r>:
 800212c:	b538      	push	{r3, r4, r5, lr}
 800212e:	4d07      	ldr	r5, [pc, #28]	@ (800214c <_read_r+0x20>)
 8002130:	4604      	mov	r4, r0
 8002132:	4608      	mov	r0, r1
 8002134:	4611      	mov	r1, r2
 8002136:	2200      	movs	r2, #0
 8002138:	602a      	str	r2, [r5, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	f7fe fc5e 	bl	80009fc <_read>
 8002140:	1c43      	adds	r3, r0, #1
 8002142:	d102      	bne.n	800214a <_read_r+0x1e>
 8002144:	682b      	ldr	r3, [r5, #0]
 8002146:	b103      	cbz	r3, 800214a <_read_r+0x1e>
 8002148:	6023      	str	r3, [r4, #0]
 800214a:	bd38      	pop	{r3, r4, r5, pc}
 800214c:	200002a4 	.word	0x200002a4

08002150 <_write_r>:
 8002150:	b538      	push	{r3, r4, r5, lr}
 8002152:	4d07      	ldr	r5, [pc, #28]	@ (8002170 <_write_r+0x20>)
 8002154:	4604      	mov	r4, r0
 8002156:	4608      	mov	r0, r1
 8002158:	4611      	mov	r1, r2
 800215a:	2200      	movs	r2, #0
 800215c:	602a      	str	r2, [r5, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	f7fe fa72 	bl	8000648 <_write>
 8002164:	1c43      	adds	r3, r0, #1
 8002166:	d102      	bne.n	800216e <_write_r+0x1e>
 8002168:	682b      	ldr	r3, [r5, #0]
 800216a:	b103      	cbz	r3, 800216e <_write_r+0x1e>
 800216c:	6023      	str	r3, [r4, #0]
 800216e:	bd38      	pop	{r3, r4, r5, pc}
 8002170:	200002a4 	.word	0x200002a4

08002174 <__errno>:
 8002174:	4b01      	ldr	r3, [pc, #4]	@ (800217c <__errno+0x8>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000018 	.word	0x20000018

08002180 <__libc_init_array>:
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	4d0d      	ldr	r5, [pc, #52]	@ (80021b8 <__libc_init_array+0x38>)
 8002184:	4c0d      	ldr	r4, [pc, #52]	@ (80021bc <__libc_init_array+0x3c>)
 8002186:	1b64      	subs	r4, r4, r5
 8002188:	10a4      	asrs	r4, r4, #2
 800218a:	2600      	movs	r6, #0
 800218c:	42a6      	cmp	r6, r4
 800218e:	d109      	bne.n	80021a4 <__libc_init_array+0x24>
 8002190:	4d0b      	ldr	r5, [pc, #44]	@ (80021c0 <__libc_init_array+0x40>)
 8002192:	4c0c      	ldr	r4, [pc, #48]	@ (80021c4 <__libc_init_array+0x44>)
 8002194:	f000 fdb8 	bl	8002d08 <_init>
 8002198:	1b64      	subs	r4, r4, r5
 800219a:	10a4      	asrs	r4, r4, #2
 800219c:	2600      	movs	r6, #0
 800219e:	42a6      	cmp	r6, r4
 80021a0:	d105      	bne.n	80021ae <__libc_init_array+0x2e>
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a8:	4798      	blx	r3
 80021aa:	3601      	adds	r6, #1
 80021ac:	e7ee      	b.n	800218c <__libc_init_array+0xc>
 80021ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b2:	4798      	blx	r3
 80021b4:	3601      	adds	r6, #1
 80021b6:	e7f2      	b.n	800219e <__libc_init_array+0x1e>
 80021b8:	08002d90 	.word	0x08002d90
 80021bc:	08002d90 	.word	0x08002d90
 80021c0:	08002d90 	.word	0x08002d90
 80021c4:	08002d94 	.word	0x08002d94

080021c8 <__retarget_lock_init_recursive>:
 80021c8:	4770      	bx	lr

080021ca <__retarget_lock_acquire_recursive>:
 80021ca:	4770      	bx	lr

080021cc <__retarget_lock_release_recursive>:
 80021cc:	4770      	bx	lr
	...

080021d0 <_free_r>:
 80021d0:	b538      	push	{r3, r4, r5, lr}
 80021d2:	4605      	mov	r5, r0
 80021d4:	2900      	cmp	r1, #0
 80021d6:	d041      	beq.n	800225c <_free_r+0x8c>
 80021d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021dc:	1f0c      	subs	r4, r1, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bfb8      	it	lt
 80021e2:	18e4      	addlt	r4, r4, r3
 80021e4:	f000 f8e0 	bl	80023a8 <__malloc_lock>
 80021e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002260 <_free_r+0x90>)
 80021ea:	6813      	ldr	r3, [r2, #0]
 80021ec:	b933      	cbnz	r3, 80021fc <_free_r+0x2c>
 80021ee:	6063      	str	r3, [r4, #4]
 80021f0:	6014      	str	r4, [r2, #0]
 80021f2:	4628      	mov	r0, r5
 80021f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021f8:	f000 b8dc 	b.w	80023b4 <__malloc_unlock>
 80021fc:	42a3      	cmp	r3, r4
 80021fe:	d908      	bls.n	8002212 <_free_r+0x42>
 8002200:	6820      	ldr	r0, [r4, #0]
 8002202:	1821      	adds	r1, r4, r0
 8002204:	428b      	cmp	r3, r1
 8002206:	bf01      	itttt	eq
 8002208:	6819      	ldreq	r1, [r3, #0]
 800220a:	685b      	ldreq	r3, [r3, #4]
 800220c:	1809      	addeq	r1, r1, r0
 800220e:	6021      	streq	r1, [r4, #0]
 8002210:	e7ed      	b.n	80021ee <_free_r+0x1e>
 8002212:	461a      	mov	r2, r3
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	b10b      	cbz	r3, 800221c <_free_r+0x4c>
 8002218:	42a3      	cmp	r3, r4
 800221a:	d9fa      	bls.n	8002212 <_free_r+0x42>
 800221c:	6811      	ldr	r1, [r2, #0]
 800221e:	1850      	adds	r0, r2, r1
 8002220:	42a0      	cmp	r0, r4
 8002222:	d10b      	bne.n	800223c <_free_r+0x6c>
 8002224:	6820      	ldr	r0, [r4, #0]
 8002226:	4401      	add	r1, r0
 8002228:	1850      	adds	r0, r2, r1
 800222a:	4283      	cmp	r3, r0
 800222c:	6011      	str	r1, [r2, #0]
 800222e:	d1e0      	bne.n	80021f2 <_free_r+0x22>
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	6053      	str	r3, [r2, #4]
 8002236:	4408      	add	r0, r1
 8002238:	6010      	str	r0, [r2, #0]
 800223a:	e7da      	b.n	80021f2 <_free_r+0x22>
 800223c:	d902      	bls.n	8002244 <_free_r+0x74>
 800223e:	230c      	movs	r3, #12
 8002240:	602b      	str	r3, [r5, #0]
 8002242:	e7d6      	b.n	80021f2 <_free_r+0x22>
 8002244:	6820      	ldr	r0, [r4, #0]
 8002246:	1821      	adds	r1, r4, r0
 8002248:	428b      	cmp	r3, r1
 800224a:	bf04      	itt	eq
 800224c:	6819      	ldreq	r1, [r3, #0]
 800224e:	685b      	ldreq	r3, [r3, #4]
 8002250:	6063      	str	r3, [r4, #4]
 8002252:	bf04      	itt	eq
 8002254:	1809      	addeq	r1, r1, r0
 8002256:	6021      	streq	r1, [r4, #0]
 8002258:	6054      	str	r4, [r2, #4]
 800225a:	e7ca      	b.n	80021f2 <_free_r+0x22>
 800225c:	bd38      	pop	{r3, r4, r5, pc}
 800225e:	bf00      	nop
 8002260:	200002b0 	.word	0x200002b0

08002264 <sbrk_aligned>:
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	4e0f      	ldr	r6, [pc, #60]	@ (80022a4 <sbrk_aligned+0x40>)
 8002268:	460c      	mov	r4, r1
 800226a:	6831      	ldr	r1, [r6, #0]
 800226c:	4605      	mov	r5, r0
 800226e:	b911      	cbnz	r1, 8002276 <sbrk_aligned+0x12>
 8002270:	f000 fcb6 	bl	8002be0 <_sbrk_r>
 8002274:	6030      	str	r0, [r6, #0]
 8002276:	4621      	mov	r1, r4
 8002278:	4628      	mov	r0, r5
 800227a:	f000 fcb1 	bl	8002be0 <_sbrk_r>
 800227e:	1c43      	adds	r3, r0, #1
 8002280:	d103      	bne.n	800228a <sbrk_aligned+0x26>
 8002282:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002286:	4620      	mov	r0, r4
 8002288:	bd70      	pop	{r4, r5, r6, pc}
 800228a:	1cc4      	adds	r4, r0, #3
 800228c:	f024 0403 	bic.w	r4, r4, #3
 8002290:	42a0      	cmp	r0, r4
 8002292:	d0f8      	beq.n	8002286 <sbrk_aligned+0x22>
 8002294:	1a21      	subs	r1, r4, r0
 8002296:	4628      	mov	r0, r5
 8002298:	f000 fca2 	bl	8002be0 <_sbrk_r>
 800229c:	3001      	adds	r0, #1
 800229e:	d1f2      	bne.n	8002286 <sbrk_aligned+0x22>
 80022a0:	e7ef      	b.n	8002282 <sbrk_aligned+0x1e>
 80022a2:	bf00      	nop
 80022a4:	200002ac 	.word	0x200002ac

080022a8 <_malloc_r>:
 80022a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022ac:	1ccd      	adds	r5, r1, #3
 80022ae:	f025 0503 	bic.w	r5, r5, #3
 80022b2:	3508      	adds	r5, #8
 80022b4:	2d0c      	cmp	r5, #12
 80022b6:	bf38      	it	cc
 80022b8:	250c      	movcc	r5, #12
 80022ba:	2d00      	cmp	r5, #0
 80022bc:	4606      	mov	r6, r0
 80022be:	db01      	blt.n	80022c4 <_malloc_r+0x1c>
 80022c0:	42a9      	cmp	r1, r5
 80022c2:	d904      	bls.n	80022ce <_malloc_r+0x26>
 80022c4:	230c      	movs	r3, #12
 80022c6:	6033      	str	r3, [r6, #0]
 80022c8:	2000      	movs	r0, #0
 80022ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80023a4 <_malloc_r+0xfc>
 80022d2:	f000 f869 	bl	80023a8 <__malloc_lock>
 80022d6:	f8d8 3000 	ldr.w	r3, [r8]
 80022da:	461c      	mov	r4, r3
 80022dc:	bb44      	cbnz	r4, 8002330 <_malloc_r+0x88>
 80022de:	4629      	mov	r1, r5
 80022e0:	4630      	mov	r0, r6
 80022e2:	f7ff ffbf 	bl	8002264 <sbrk_aligned>
 80022e6:	1c43      	adds	r3, r0, #1
 80022e8:	4604      	mov	r4, r0
 80022ea:	d158      	bne.n	800239e <_malloc_r+0xf6>
 80022ec:	f8d8 4000 	ldr.w	r4, [r8]
 80022f0:	4627      	mov	r7, r4
 80022f2:	2f00      	cmp	r7, #0
 80022f4:	d143      	bne.n	800237e <_malloc_r+0xd6>
 80022f6:	2c00      	cmp	r4, #0
 80022f8:	d04b      	beq.n	8002392 <_malloc_r+0xea>
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	4639      	mov	r1, r7
 80022fe:	4630      	mov	r0, r6
 8002300:	eb04 0903 	add.w	r9, r4, r3
 8002304:	f000 fc6c 	bl	8002be0 <_sbrk_r>
 8002308:	4581      	cmp	r9, r0
 800230a:	d142      	bne.n	8002392 <_malloc_r+0xea>
 800230c:	6821      	ldr	r1, [r4, #0]
 800230e:	1a6d      	subs	r5, r5, r1
 8002310:	4629      	mov	r1, r5
 8002312:	4630      	mov	r0, r6
 8002314:	f7ff ffa6 	bl	8002264 <sbrk_aligned>
 8002318:	3001      	adds	r0, #1
 800231a:	d03a      	beq.n	8002392 <_malloc_r+0xea>
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	442b      	add	r3, r5
 8002320:	6023      	str	r3, [r4, #0]
 8002322:	f8d8 3000 	ldr.w	r3, [r8]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	bb62      	cbnz	r2, 8002384 <_malloc_r+0xdc>
 800232a:	f8c8 7000 	str.w	r7, [r8]
 800232e:	e00f      	b.n	8002350 <_malloc_r+0xa8>
 8002330:	6822      	ldr	r2, [r4, #0]
 8002332:	1b52      	subs	r2, r2, r5
 8002334:	d420      	bmi.n	8002378 <_malloc_r+0xd0>
 8002336:	2a0b      	cmp	r2, #11
 8002338:	d917      	bls.n	800236a <_malloc_r+0xc2>
 800233a:	1961      	adds	r1, r4, r5
 800233c:	42a3      	cmp	r3, r4
 800233e:	6025      	str	r5, [r4, #0]
 8002340:	bf18      	it	ne
 8002342:	6059      	strne	r1, [r3, #4]
 8002344:	6863      	ldr	r3, [r4, #4]
 8002346:	bf08      	it	eq
 8002348:	f8c8 1000 	streq.w	r1, [r8]
 800234c:	5162      	str	r2, [r4, r5]
 800234e:	604b      	str	r3, [r1, #4]
 8002350:	4630      	mov	r0, r6
 8002352:	f000 f82f 	bl	80023b4 <__malloc_unlock>
 8002356:	f104 000b 	add.w	r0, r4, #11
 800235a:	1d23      	adds	r3, r4, #4
 800235c:	f020 0007 	bic.w	r0, r0, #7
 8002360:	1ac2      	subs	r2, r0, r3
 8002362:	bf1c      	itt	ne
 8002364:	1a1b      	subne	r3, r3, r0
 8002366:	50a3      	strne	r3, [r4, r2]
 8002368:	e7af      	b.n	80022ca <_malloc_r+0x22>
 800236a:	6862      	ldr	r2, [r4, #4]
 800236c:	42a3      	cmp	r3, r4
 800236e:	bf0c      	ite	eq
 8002370:	f8c8 2000 	streq.w	r2, [r8]
 8002374:	605a      	strne	r2, [r3, #4]
 8002376:	e7eb      	b.n	8002350 <_malloc_r+0xa8>
 8002378:	4623      	mov	r3, r4
 800237a:	6864      	ldr	r4, [r4, #4]
 800237c:	e7ae      	b.n	80022dc <_malloc_r+0x34>
 800237e:	463c      	mov	r4, r7
 8002380:	687f      	ldr	r7, [r7, #4]
 8002382:	e7b6      	b.n	80022f2 <_malloc_r+0x4a>
 8002384:	461a      	mov	r2, r3
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	42a3      	cmp	r3, r4
 800238a:	d1fb      	bne.n	8002384 <_malloc_r+0xdc>
 800238c:	2300      	movs	r3, #0
 800238e:	6053      	str	r3, [r2, #4]
 8002390:	e7de      	b.n	8002350 <_malloc_r+0xa8>
 8002392:	230c      	movs	r3, #12
 8002394:	6033      	str	r3, [r6, #0]
 8002396:	4630      	mov	r0, r6
 8002398:	f000 f80c 	bl	80023b4 <__malloc_unlock>
 800239c:	e794      	b.n	80022c8 <_malloc_r+0x20>
 800239e:	6005      	str	r5, [r0, #0]
 80023a0:	e7d6      	b.n	8002350 <_malloc_r+0xa8>
 80023a2:	bf00      	nop
 80023a4:	200002b0 	.word	0x200002b0

080023a8 <__malloc_lock>:
 80023a8:	4801      	ldr	r0, [pc, #4]	@ (80023b0 <__malloc_lock+0x8>)
 80023aa:	f7ff bf0e 	b.w	80021ca <__retarget_lock_acquire_recursive>
 80023ae:	bf00      	nop
 80023b0:	200002a8 	.word	0x200002a8

080023b4 <__malloc_unlock>:
 80023b4:	4801      	ldr	r0, [pc, #4]	@ (80023bc <__malloc_unlock+0x8>)
 80023b6:	f7ff bf09 	b.w	80021cc <__retarget_lock_release_recursive>
 80023ba:	bf00      	nop
 80023bc:	200002a8 	.word	0x200002a8

080023c0 <__sfputc_r>:
 80023c0:	6893      	ldr	r3, [r2, #8]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	b410      	push	{r4}
 80023c8:	6093      	str	r3, [r2, #8]
 80023ca:	da08      	bge.n	80023de <__sfputc_r+0x1e>
 80023cc:	6994      	ldr	r4, [r2, #24]
 80023ce:	42a3      	cmp	r3, r4
 80023d0:	db01      	blt.n	80023d6 <__sfputc_r+0x16>
 80023d2:	290a      	cmp	r1, #10
 80023d4:	d103      	bne.n	80023de <__sfputc_r+0x1e>
 80023d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023da:	f000 bb6d 	b.w	8002ab8 <__swbuf_r>
 80023de:	6813      	ldr	r3, [r2, #0]
 80023e0:	1c58      	adds	r0, r3, #1
 80023e2:	6010      	str	r0, [r2, #0]
 80023e4:	7019      	strb	r1, [r3, #0]
 80023e6:	4608      	mov	r0, r1
 80023e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <__sfputs_r>:
 80023ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f0:	4606      	mov	r6, r0
 80023f2:	460f      	mov	r7, r1
 80023f4:	4614      	mov	r4, r2
 80023f6:	18d5      	adds	r5, r2, r3
 80023f8:	42ac      	cmp	r4, r5
 80023fa:	d101      	bne.n	8002400 <__sfputs_r+0x12>
 80023fc:	2000      	movs	r0, #0
 80023fe:	e007      	b.n	8002410 <__sfputs_r+0x22>
 8002400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002404:	463a      	mov	r2, r7
 8002406:	4630      	mov	r0, r6
 8002408:	f7ff ffda 	bl	80023c0 <__sfputc_r>
 800240c:	1c43      	adds	r3, r0, #1
 800240e:	d1f3      	bne.n	80023f8 <__sfputs_r+0xa>
 8002410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002414 <_vfiprintf_r>:
 8002414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002418:	460d      	mov	r5, r1
 800241a:	b09d      	sub	sp, #116	@ 0x74
 800241c:	4614      	mov	r4, r2
 800241e:	4698      	mov	r8, r3
 8002420:	4606      	mov	r6, r0
 8002422:	b118      	cbz	r0, 800242c <_vfiprintf_r+0x18>
 8002424:	6a03      	ldr	r3, [r0, #32]
 8002426:	b90b      	cbnz	r3, 800242c <_vfiprintf_r+0x18>
 8002428:	f7ff fdca 	bl	8001fc0 <__sinit>
 800242c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800242e:	07d9      	lsls	r1, r3, #31
 8002430:	d405      	bmi.n	800243e <_vfiprintf_r+0x2a>
 8002432:	89ab      	ldrh	r3, [r5, #12]
 8002434:	059a      	lsls	r2, r3, #22
 8002436:	d402      	bmi.n	800243e <_vfiprintf_r+0x2a>
 8002438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800243a:	f7ff fec6 	bl	80021ca <__retarget_lock_acquire_recursive>
 800243e:	89ab      	ldrh	r3, [r5, #12]
 8002440:	071b      	lsls	r3, r3, #28
 8002442:	d501      	bpl.n	8002448 <_vfiprintf_r+0x34>
 8002444:	692b      	ldr	r3, [r5, #16]
 8002446:	b99b      	cbnz	r3, 8002470 <_vfiprintf_r+0x5c>
 8002448:	4629      	mov	r1, r5
 800244a:	4630      	mov	r0, r6
 800244c:	f000 fb72 	bl	8002b34 <__swsetup_r>
 8002450:	b170      	cbz	r0, 8002470 <_vfiprintf_r+0x5c>
 8002452:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002454:	07dc      	lsls	r4, r3, #31
 8002456:	d504      	bpl.n	8002462 <_vfiprintf_r+0x4e>
 8002458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800245c:	b01d      	add	sp, #116	@ 0x74
 800245e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002462:	89ab      	ldrh	r3, [r5, #12]
 8002464:	0598      	lsls	r0, r3, #22
 8002466:	d4f7      	bmi.n	8002458 <_vfiprintf_r+0x44>
 8002468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800246a:	f7ff feaf 	bl	80021cc <__retarget_lock_release_recursive>
 800246e:	e7f3      	b.n	8002458 <_vfiprintf_r+0x44>
 8002470:	2300      	movs	r3, #0
 8002472:	9309      	str	r3, [sp, #36]	@ 0x24
 8002474:	2320      	movs	r3, #32
 8002476:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800247a:	f8cd 800c 	str.w	r8, [sp, #12]
 800247e:	2330      	movs	r3, #48	@ 0x30
 8002480:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002630 <_vfiprintf_r+0x21c>
 8002484:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002488:	f04f 0901 	mov.w	r9, #1
 800248c:	4623      	mov	r3, r4
 800248e:	469a      	mov	sl, r3
 8002490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002494:	b10a      	cbz	r2, 800249a <_vfiprintf_r+0x86>
 8002496:	2a25      	cmp	r2, #37	@ 0x25
 8002498:	d1f9      	bne.n	800248e <_vfiprintf_r+0x7a>
 800249a:	ebba 0b04 	subs.w	fp, sl, r4
 800249e:	d00b      	beq.n	80024b8 <_vfiprintf_r+0xa4>
 80024a0:	465b      	mov	r3, fp
 80024a2:	4622      	mov	r2, r4
 80024a4:	4629      	mov	r1, r5
 80024a6:	4630      	mov	r0, r6
 80024a8:	f7ff ffa1 	bl	80023ee <__sfputs_r>
 80024ac:	3001      	adds	r0, #1
 80024ae:	f000 80a7 	beq.w	8002600 <_vfiprintf_r+0x1ec>
 80024b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80024b4:	445a      	add	r2, fp
 80024b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80024b8:	f89a 3000 	ldrb.w	r3, [sl]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 809f 	beq.w	8002600 <_vfiprintf_r+0x1ec>
 80024c2:	2300      	movs	r3, #0
 80024c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024cc:	f10a 0a01 	add.w	sl, sl, #1
 80024d0:	9304      	str	r3, [sp, #16]
 80024d2:	9307      	str	r3, [sp, #28]
 80024d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80024d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80024da:	4654      	mov	r4, sl
 80024dc:	2205      	movs	r2, #5
 80024de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024e2:	4853      	ldr	r0, [pc, #332]	@ (8002630 <_vfiprintf_r+0x21c>)
 80024e4:	f7fd fe94 	bl	8000210 <memchr>
 80024e8:	9a04      	ldr	r2, [sp, #16]
 80024ea:	b9d8      	cbnz	r0, 8002524 <_vfiprintf_r+0x110>
 80024ec:	06d1      	lsls	r1, r2, #27
 80024ee:	bf44      	itt	mi
 80024f0:	2320      	movmi	r3, #32
 80024f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80024f6:	0713      	lsls	r3, r2, #28
 80024f8:	bf44      	itt	mi
 80024fa:	232b      	movmi	r3, #43	@ 0x2b
 80024fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002500:	f89a 3000 	ldrb.w	r3, [sl]
 8002504:	2b2a      	cmp	r3, #42	@ 0x2a
 8002506:	d015      	beq.n	8002534 <_vfiprintf_r+0x120>
 8002508:	9a07      	ldr	r2, [sp, #28]
 800250a:	4654      	mov	r4, sl
 800250c:	2000      	movs	r0, #0
 800250e:	f04f 0c0a 	mov.w	ip, #10
 8002512:	4621      	mov	r1, r4
 8002514:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002518:	3b30      	subs	r3, #48	@ 0x30
 800251a:	2b09      	cmp	r3, #9
 800251c:	d94b      	bls.n	80025b6 <_vfiprintf_r+0x1a2>
 800251e:	b1b0      	cbz	r0, 800254e <_vfiprintf_r+0x13a>
 8002520:	9207      	str	r2, [sp, #28]
 8002522:	e014      	b.n	800254e <_vfiprintf_r+0x13a>
 8002524:	eba0 0308 	sub.w	r3, r0, r8
 8002528:	fa09 f303 	lsl.w	r3, r9, r3
 800252c:	4313      	orrs	r3, r2
 800252e:	9304      	str	r3, [sp, #16]
 8002530:	46a2      	mov	sl, r4
 8002532:	e7d2      	b.n	80024da <_vfiprintf_r+0xc6>
 8002534:	9b03      	ldr	r3, [sp, #12]
 8002536:	1d19      	adds	r1, r3, #4
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	9103      	str	r1, [sp, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	bfbb      	ittet	lt
 8002540:	425b      	neglt	r3, r3
 8002542:	f042 0202 	orrlt.w	r2, r2, #2
 8002546:	9307      	strge	r3, [sp, #28]
 8002548:	9307      	strlt	r3, [sp, #28]
 800254a:	bfb8      	it	lt
 800254c:	9204      	strlt	r2, [sp, #16]
 800254e:	7823      	ldrb	r3, [r4, #0]
 8002550:	2b2e      	cmp	r3, #46	@ 0x2e
 8002552:	d10a      	bne.n	800256a <_vfiprintf_r+0x156>
 8002554:	7863      	ldrb	r3, [r4, #1]
 8002556:	2b2a      	cmp	r3, #42	@ 0x2a
 8002558:	d132      	bne.n	80025c0 <_vfiprintf_r+0x1ac>
 800255a:	9b03      	ldr	r3, [sp, #12]
 800255c:	1d1a      	adds	r2, r3, #4
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	9203      	str	r2, [sp, #12]
 8002562:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002566:	3402      	adds	r4, #2
 8002568:	9305      	str	r3, [sp, #20]
 800256a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002640 <_vfiprintf_r+0x22c>
 800256e:	7821      	ldrb	r1, [r4, #0]
 8002570:	2203      	movs	r2, #3
 8002572:	4650      	mov	r0, sl
 8002574:	f7fd fe4c 	bl	8000210 <memchr>
 8002578:	b138      	cbz	r0, 800258a <_vfiprintf_r+0x176>
 800257a:	9b04      	ldr	r3, [sp, #16]
 800257c:	eba0 000a 	sub.w	r0, r0, sl
 8002580:	2240      	movs	r2, #64	@ 0x40
 8002582:	4082      	lsls	r2, r0
 8002584:	4313      	orrs	r3, r2
 8002586:	3401      	adds	r4, #1
 8002588:	9304      	str	r3, [sp, #16]
 800258a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800258e:	4829      	ldr	r0, [pc, #164]	@ (8002634 <_vfiprintf_r+0x220>)
 8002590:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002594:	2206      	movs	r2, #6
 8002596:	f7fd fe3b 	bl	8000210 <memchr>
 800259a:	2800      	cmp	r0, #0
 800259c:	d03f      	beq.n	800261e <_vfiprintf_r+0x20a>
 800259e:	4b26      	ldr	r3, [pc, #152]	@ (8002638 <_vfiprintf_r+0x224>)
 80025a0:	bb1b      	cbnz	r3, 80025ea <_vfiprintf_r+0x1d6>
 80025a2:	9b03      	ldr	r3, [sp, #12]
 80025a4:	3307      	adds	r3, #7
 80025a6:	f023 0307 	bic.w	r3, r3, #7
 80025aa:	3308      	adds	r3, #8
 80025ac:	9303      	str	r3, [sp, #12]
 80025ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025b0:	443b      	add	r3, r7
 80025b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80025b4:	e76a      	b.n	800248c <_vfiprintf_r+0x78>
 80025b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80025ba:	460c      	mov	r4, r1
 80025bc:	2001      	movs	r0, #1
 80025be:	e7a8      	b.n	8002512 <_vfiprintf_r+0xfe>
 80025c0:	2300      	movs	r3, #0
 80025c2:	3401      	adds	r4, #1
 80025c4:	9305      	str	r3, [sp, #20]
 80025c6:	4619      	mov	r1, r3
 80025c8:	f04f 0c0a 	mov.w	ip, #10
 80025cc:	4620      	mov	r0, r4
 80025ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025d2:	3a30      	subs	r2, #48	@ 0x30
 80025d4:	2a09      	cmp	r2, #9
 80025d6:	d903      	bls.n	80025e0 <_vfiprintf_r+0x1cc>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0c6      	beq.n	800256a <_vfiprintf_r+0x156>
 80025dc:	9105      	str	r1, [sp, #20]
 80025de:	e7c4      	b.n	800256a <_vfiprintf_r+0x156>
 80025e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80025e4:	4604      	mov	r4, r0
 80025e6:	2301      	movs	r3, #1
 80025e8:	e7f0      	b.n	80025cc <_vfiprintf_r+0x1b8>
 80025ea:	ab03      	add	r3, sp, #12
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	462a      	mov	r2, r5
 80025f0:	4b12      	ldr	r3, [pc, #72]	@ (800263c <_vfiprintf_r+0x228>)
 80025f2:	a904      	add	r1, sp, #16
 80025f4:	4630      	mov	r0, r6
 80025f6:	f3af 8000 	nop.w
 80025fa:	4607      	mov	r7, r0
 80025fc:	1c78      	adds	r0, r7, #1
 80025fe:	d1d6      	bne.n	80025ae <_vfiprintf_r+0x19a>
 8002600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002602:	07d9      	lsls	r1, r3, #31
 8002604:	d405      	bmi.n	8002612 <_vfiprintf_r+0x1fe>
 8002606:	89ab      	ldrh	r3, [r5, #12]
 8002608:	059a      	lsls	r2, r3, #22
 800260a:	d402      	bmi.n	8002612 <_vfiprintf_r+0x1fe>
 800260c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800260e:	f7ff fddd 	bl	80021cc <__retarget_lock_release_recursive>
 8002612:	89ab      	ldrh	r3, [r5, #12]
 8002614:	065b      	lsls	r3, r3, #25
 8002616:	f53f af1f 	bmi.w	8002458 <_vfiprintf_r+0x44>
 800261a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800261c:	e71e      	b.n	800245c <_vfiprintf_r+0x48>
 800261e:	ab03      	add	r3, sp, #12
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	462a      	mov	r2, r5
 8002624:	4b05      	ldr	r3, [pc, #20]	@ (800263c <_vfiprintf_r+0x228>)
 8002626:	a904      	add	r1, sp, #16
 8002628:	4630      	mov	r0, r6
 800262a:	f000 f879 	bl	8002720 <_printf_i>
 800262e:	e7e4      	b.n	80025fa <_vfiprintf_r+0x1e6>
 8002630:	08002d54 	.word	0x08002d54
 8002634:	08002d5e 	.word	0x08002d5e
 8002638:	00000000 	.word	0x00000000
 800263c:	080023ef 	.word	0x080023ef
 8002640:	08002d5a 	.word	0x08002d5a

08002644 <_printf_common>:
 8002644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002648:	4616      	mov	r6, r2
 800264a:	4698      	mov	r8, r3
 800264c:	688a      	ldr	r2, [r1, #8]
 800264e:	690b      	ldr	r3, [r1, #16]
 8002650:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002654:	4293      	cmp	r3, r2
 8002656:	bfb8      	it	lt
 8002658:	4613      	movlt	r3, r2
 800265a:	6033      	str	r3, [r6, #0]
 800265c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002660:	4607      	mov	r7, r0
 8002662:	460c      	mov	r4, r1
 8002664:	b10a      	cbz	r2, 800266a <_printf_common+0x26>
 8002666:	3301      	adds	r3, #1
 8002668:	6033      	str	r3, [r6, #0]
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	0699      	lsls	r1, r3, #26
 800266e:	bf42      	ittt	mi
 8002670:	6833      	ldrmi	r3, [r6, #0]
 8002672:	3302      	addmi	r3, #2
 8002674:	6033      	strmi	r3, [r6, #0]
 8002676:	6825      	ldr	r5, [r4, #0]
 8002678:	f015 0506 	ands.w	r5, r5, #6
 800267c:	d106      	bne.n	800268c <_printf_common+0x48>
 800267e:	f104 0a19 	add.w	sl, r4, #25
 8002682:	68e3      	ldr	r3, [r4, #12]
 8002684:	6832      	ldr	r2, [r6, #0]
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	42ab      	cmp	r3, r5
 800268a:	dc26      	bgt.n	80026da <_printf_common+0x96>
 800268c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002690:	6822      	ldr	r2, [r4, #0]
 8002692:	3b00      	subs	r3, #0
 8002694:	bf18      	it	ne
 8002696:	2301      	movne	r3, #1
 8002698:	0692      	lsls	r2, r2, #26
 800269a:	d42b      	bmi.n	80026f4 <_printf_common+0xb0>
 800269c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80026a0:	4641      	mov	r1, r8
 80026a2:	4638      	mov	r0, r7
 80026a4:	47c8      	blx	r9
 80026a6:	3001      	adds	r0, #1
 80026a8:	d01e      	beq.n	80026e8 <_printf_common+0xa4>
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	6922      	ldr	r2, [r4, #16]
 80026ae:	f003 0306 	and.w	r3, r3, #6
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	bf02      	ittt	eq
 80026b6:	68e5      	ldreq	r5, [r4, #12]
 80026b8:	6833      	ldreq	r3, [r6, #0]
 80026ba:	1aed      	subeq	r5, r5, r3
 80026bc:	68a3      	ldr	r3, [r4, #8]
 80026be:	bf0c      	ite	eq
 80026c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026c4:	2500      	movne	r5, #0
 80026c6:	4293      	cmp	r3, r2
 80026c8:	bfc4      	itt	gt
 80026ca:	1a9b      	subgt	r3, r3, r2
 80026cc:	18ed      	addgt	r5, r5, r3
 80026ce:	2600      	movs	r6, #0
 80026d0:	341a      	adds	r4, #26
 80026d2:	42b5      	cmp	r5, r6
 80026d4:	d11a      	bne.n	800270c <_printf_common+0xc8>
 80026d6:	2000      	movs	r0, #0
 80026d8:	e008      	b.n	80026ec <_printf_common+0xa8>
 80026da:	2301      	movs	r3, #1
 80026dc:	4652      	mov	r2, sl
 80026de:	4641      	mov	r1, r8
 80026e0:	4638      	mov	r0, r7
 80026e2:	47c8      	blx	r9
 80026e4:	3001      	adds	r0, #1
 80026e6:	d103      	bne.n	80026f0 <_printf_common+0xac>
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026f0:	3501      	adds	r5, #1
 80026f2:	e7c6      	b.n	8002682 <_printf_common+0x3e>
 80026f4:	18e1      	adds	r1, r4, r3
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	2030      	movs	r0, #48	@ 0x30
 80026fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80026fe:	4422      	add	r2, r4
 8002700:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002704:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002708:	3302      	adds	r3, #2
 800270a:	e7c7      	b.n	800269c <_printf_common+0x58>
 800270c:	2301      	movs	r3, #1
 800270e:	4622      	mov	r2, r4
 8002710:	4641      	mov	r1, r8
 8002712:	4638      	mov	r0, r7
 8002714:	47c8      	blx	r9
 8002716:	3001      	adds	r0, #1
 8002718:	d0e6      	beq.n	80026e8 <_printf_common+0xa4>
 800271a:	3601      	adds	r6, #1
 800271c:	e7d9      	b.n	80026d2 <_printf_common+0x8e>
	...

08002720 <_printf_i>:
 8002720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002724:	7e0f      	ldrb	r7, [r1, #24]
 8002726:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002728:	2f78      	cmp	r7, #120	@ 0x78
 800272a:	4691      	mov	r9, r2
 800272c:	4680      	mov	r8, r0
 800272e:	460c      	mov	r4, r1
 8002730:	469a      	mov	sl, r3
 8002732:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002736:	d807      	bhi.n	8002748 <_printf_i+0x28>
 8002738:	2f62      	cmp	r7, #98	@ 0x62
 800273a:	d80a      	bhi.n	8002752 <_printf_i+0x32>
 800273c:	2f00      	cmp	r7, #0
 800273e:	f000 80d2 	beq.w	80028e6 <_printf_i+0x1c6>
 8002742:	2f58      	cmp	r7, #88	@ 0x58
 8002744:	f000 80b9 	beq.w	80028ba <_printf_i+0x19a>
 8002748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800274c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002750:	e03a      	b.n	80027c8 <_printf_i+0xa8>
 8002752:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002756:	2b15      	cmp	r3, #21
 8002758:	d8f6      	bhi.n	8002748 <_printf_i+0x28>
 800275a:	a101      	add	r1, pc, #4	@ (adr r1, 8002760 <_printf_i+0x40>)
 800275c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002760:	080027b9 	.word	0x080027b9
 8002764:	080027cd 	.word	0x080027cd
 8002768:	08002749 	.word	0x08002749
 800276c:	08002749 	.word	0x08002749
 8002770:	08002749 	.word	0x08002749
 8002774:	08002749 	.word	0x08002749
 8002778:	080027cd 	.word	0x080027cd
 800277c:	08002749 	.word	0x08002749
 8002780:	08002749 	.word	0x08002749
 8002784:	08002749 	.word	0x08002749
 8002788:	08002749 	.word	0x08002749
 800278c:	080028cd 	.word	0x080028cd
 8002790:	080027f7 	.word	0x080027f7
 8002794:	08002887 	.word	0x08002887
 8002798:	08002749 	.word	0x08002749
 800279c:	08002749 	.word	0x08002749
 80027a0:	080028ef 	.word	0x080028ef
 80027a4:	08002749 	.word	0x08002749
 80027a8:	080027f7 	.word	0x080027f7
 80027ac:	08002749 	.word	0x08002749
 80027b0:	08002749 	.word	0x08002749
 80027b4:	0800288f 	.word	0x0800288f
 80027b8:	6833      	ldr	r3, [r6, #0]
 80027ba:	1d1a      	adds	r2, r3, #4
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6032      	str	r2, [r6, #0]
 80027c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80027c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80027c8:	2301      	movs	r3, #1
 80027ca:	e09d      	b.n	8002908 <_printf_i+0x1e8>
 80027cc:	6833      	ldr	r3, [r6, #0]
 80027ce:	6820      	ldr	r0, [r4, #0]
 80027d0:	1d19      	adds	r1, r3, #4
 80027d2:	6031      	str	r1, [r6, #0]
 80027d4:	0606      	lsls	r6, r0, #24
 80027d6:	d501      	bpl.n	80027dc <_printf_i+0xbc>
 80027d8:	681d      	ldr	r5, [r3, #0]
 80027da:	e003      	b.n	80027e4 <_printf_i+0xc4>
 80027dc:	0645      	lsls	r5, r0, #25
 80027de:	d5fb      	bpl.n	80027d8 <_printf_i+0xb8>
 80027e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80027e4:	2d00      	cmp	r5, #0
 80027e6:	da03      	bge.n	80027f0 <_printf_i+0xd0>
 80027e8:	232d      	movs	r3, #45	@ 0x2d
 80027ea:	426d      	negs	r5, r5
 80027ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80027f0:	4859      	ldr	r0, [pc, #356]	@ (8002958 <_printf_i+0x238>)
 80027f2:	230a      	movs	r3, #10
 80027f4:	e011      	b.n	800281a <_printf_i+0xfa>
 80027f6:	6821      	ldr	r1, [r4, #0]
 80027f8:	6833      	ldr	r3, [r6, #0]
 80027fa:	0608      	lsls	r0, r1, #24
 80027fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8002800:	d402      	bmi.n	8002808 <_printf_i+0xe8>
 8002802:	0649      	lsls	r1, r1, #25
 8002804:	bf48      	it	mi
 8002806:	b2ad      	uxthmi	r5, r5
 8002808:	2f6f      	cmp	r7, #111	@ 0x6f
 800280a:	4853      	ldr	r0, [pc, #332]	@ (8002958 <_printf_i+0x238>)
 800280c:	6033      	str	r3, [r6, #0]
 800280e:	bf14      	ite	ne
 8002810:	230a      	movne	r3, #10
 8002812:	2308      	moveq	r3, #8
 8002814:	2100      	movs	r1, #0
 8002816:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800281a:	6866      	ldr	r6, [r4, #4]
 800281c:	60a6      	str	r6, [r4, #8]
 800281e:	2e00      	cmp	r6, #0
 8002820:	bfa2      	ittt	ge
 8002822:	6821      	ldrge	r1, [r4, #0]
 8002824:	f021 0104 	bicge.w	r1, r1, #4
 8002828:	6021      	strge	r1, [r4, #0]
 800282a:	b90d      	cbnz	r5, 8002830 <_printf_i+0x110>
 800282c:	2e00      	cmp	r6, #0
 800282e:	d04b      	beq.n	80028c8 <_printf_i+0x1a8>
 8002830:	4616      	mov	r6, r2
 8002832:	fbb5 f1f3 	udiv	r1, r5, r3
 8002836:	fb03 5711 	mls	r7, r3, r1, r5
 800283a:	5dc7      	ldrb	r7, [r0, r7]
 800283c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002840:	462f      	mov	r7, r5
 8002842:	42bb      	cmp	r3, r7
 8002844:	460d      	mov	r5, r1
 8002846:	d9f4      	bls.n	8002832 <_printf_i+0x112>
 8002848:	2b08      	cmp	r3, #8
 800284a:	d10b      	bne.n	8002864 <_printf_i+0x144>
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	07df      	lsls	r7, r3, #31
 8002850:	d508      	bpl.n	8002864 <_printf_i+0x144>
 8002852:	6923      	ldr	r3, [r4, #16]
 8002854:	6861      	ldr	r1, [r4, #4]
 8002856:	4299      	cmp	r1, r3
 8002858:	bfde      	ittt	le
 800285a:	2330      	movle	r3, #48	@ 0x30
 800285c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002860:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002864:	1b92      	subs	r2, r2, r6
 8002866:	6122      	str	r2, [r4, #16]
 8002868:	f8cd a000 	str.w	sl, [sp]
 800286c:	464b      	mov	r3, r9
 800286e:	aa03      	add	r2, sp, #12
 8002870:	4621      	mov	r1, r4
 8002872:	4640      	mov	r0, r8
 8002874:	f7ff fee6 	bl	8002644 <_printf_common>
 8002878:	3001      	adds	r0, #1
 800287a:	d14a      	bne.n	8002912 <_printf_i+0x1f2>
 800287c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002880:	b004      	add	sp, #16
 8002882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	f043 0320 	orr.w	r3, r3, #32
 800288c:	6023      	str	r3, [r4, #0]
 800288e:	4833      	ldr	r0, [pc, #204]	@ (800295c <_printf_i+0x23c>)
 8002890:	2778      	movs	r7, #120	@ 0x78
 8002892:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	6831      	ldr	r1, [r6, #0]
 800289a:	061f      	lsls	r7, r3, #24
 800289c:	f851 5b04 	ldr.w	r5, [r1], #4
 80028a0:	d402      	bmi.n	80028a8 <_printf_i+0x188>
 80028a2:	065f      	lsls	r7, r3, #25
 80028a4:	bf48      	it	mi
 80028a6:	b2ad      	uxthmi	r5, r5
 80028a8:	6031      	str	r1, [r6, #0]
 80028aa:	07d9      	lsls	r1, r3, #31
 80028ac:	bf44      	itt	mi
 80028ae:	f043 0320 	orrmi.w	r3, r3, #32
 80028b2:	6023      	strmi	r3, [r4, #0]
 80028b4:	b11d      	cbz	r5, 80028be <_printf_i+0x19e>
 80028b6:	2310      	movs	r3, #16
 80028b8:	e7ac      	b.n	8002814 <_printf_i+0xf4>
 80028ba:	4827      	ldr	r0, [pc, #156]	@ (8002958 <_printf_i+0x238>)
 80028bc:	e7e9      	b.n	8002892 <_printf_i+0x172>
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	f023 0320 	bic.w	r3, r3, #32
 80028c4:	6023      	str	r3, [r4, #0]
 80028c6:	e7f6      	b.n	80028b6 <_printf_i+0x196>
 80028c8:	4616      	mov	r6, r2
 80028ca:	e7bd      	b.n	8002848 <_printf_i+0x128>
 80028cc:	6833      	ldr	r3, [r6, #0]
 80028ce:	6825      	ldr	r5, [r4, #0]
 80028d0:	6961      	ldr	r1, [r4, #20]
 80028d2:	1d18      	adds	r0, r3, #4
 80028d4:	6030      	str	r0, [r6, #0]
 80028d6:	062e      	lsls	r6, r5, #24
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	d501      	bpl.n	80028e0 <_printf_i+0x1c0>
 80028dc:	6019      	str	r1, [r3, #0]
 80028de:	e002      	b.n	80028e6 <_printf_i+0x1c6>
 80028e0:	0668      	lsls	r0, r5, #25
 80028e2:	d5fb      	bpl.n	80028dc <_printf_i+0x1bc>
 80028e4:	8019      	strh	r1, [r3, #0]
 80028e6:	2300      	movs	r3, #0
 80028e8:	6123      	str	r3, [r4, #16]
 80028ea:	4616      	mov	r6, r2
 80028ec:	e7bc      	b.n	8002868 <_printf_i+0x148>
 80028ee:	6833      	ldr	r3, [r6, #0]
 80028f0:	1d1a      	adds	r2, r3, #4
 80028f2:	6032      	str	r2, [r6, #0]
 80028f4:	681e      	ldr	r6, [r3, #0]
 80028f6:	6862      	ldr	r2, [r4, #4]
 80028f8:	2100      	movs	r1, #0
 80028fa:	4630      	mov	r0, r6
 80028fc:	f7fd fc88 	bl	8000210 <memchr>
 8002900:	b108      	cbz	r0, 8002906 <_printf_i+0x1e6>
 8002902:	1b80      	subs	r0, r0, r6
 8002904:	6060      	str	r0, [r4, #4]
 8002906:	6863      	ldr	r3, [r4, #4]
 8002908:	6123      	str	r3, [r4, #16]
 800290a:	2300      	movs	r3, #0
 800290c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002910:	e7aa      	b.n	8002868 <_printf_i+0x148>
 8002912:	6923      	ldr	r3, [r4, #16]
 8002914:	4632      	mov	r2, r6
 8002916:	4649      	mov	r1, r9
 8002918:	4640      	mov	r0, r8
 800291a:	47d0      	blx	sl
 800291c:	3001      	adds	r0, #1
 800291e:	d0ad      	beq.n	800287c <_printf_i+0x15c>
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	079b      	lsls	r3, r3, #30
 8002924:	d413      	bmi.n	800294e <_printf_i+0x22e>
 8002926:	68e0      	ldr	r0, [r4, #12]
 8002928:	9b03      	ldr	r3, [sp, #12]
 800292a:	4298      	cmp	r0, r3
 800292c:	bfb8      	it	lt
 800292e:	4618      	movlt	r0, r3
 8002930:	e7a6      	b.n	8002880 <_printf_i+0x160>
 8002932:	2301      	movs	r3, #1
 8002934:	4632      	mov	r2, r6
 8002936:	4649      	mov	r1, r9
 8002938:	4640      	mov	r0, r8
 800293a:	47d0      	blx	sl
 800293c:	3001      	adds	r0, #1
 800293e:	d09d      	beq.n	800287c <_printf_i+0x15c>
 8002940:	3501      	adds	r5, #1
 8002942:	68e3      	ldr	r3, [r4, #12]
 8002944:	9903      	ldr	r1, [sp, #12]
 8002946:	1a5b      	subs	r3, r3, r1
 8002948:	42ab      	cmp	r3, r5
 800294a:	dcf2      	bgt.n	8002932 <_printf_i+0x212>
 800294c:	e7eb      	b.n	8002926 <_printf_i+0x206>
 800294e:	2500      	movs	r5, #0
 8002950:	f104 0619 	add.w	r6, r4, #25
 8002954:	e7f5      	b.n	8002942 <_printf_i+0x222>
 8002956:	bf00      	nop
 8002958:	08002d65 	.word	0x08002d65
 800295c:	08002d76 	.word	0x08002d76

08002960 <__sflush_r>:
 8002960:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002968:	0716      	lsls	r6, r2, #28
 800296a:	4605      	mov	r5, r0
 800296c:	460c      	mov	r4, r1
 800296e:	d454      	bmi.n	8002a1a <__sflush_r+0xba>
 8002970:	684b      	ldr	r3, [r1, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	dc02      	bgt.n	800297c <__sflush_r+0x1c>
 8002976:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	dd48      	ble.n	8002a0e <__sflush_r+0xae>
 800297c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800297e:	2e00      	cmp	r6, #0
 8002980:	d045      	beq.n	8002a0e <__sflush_r+0xae>
 8002982:	2300      	movs	r3, #0
 8002984:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002988:	682f      	ldr	r7, [r5, #0]
 800298a:	6a21      	ldr	r1, [r4, #32]
 800298c:	602b      	str	r3, [r5, #0]
 800298e:	d030      	beq.n	80029f2 <__sflush_r+0x92>
 8002990:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002992:	89a3      	ldrh	r3, [r4, #12]
 8002994:	0759      	lsls	r1, r3, #29
 8002996:	d505      	bpl.n	80029a4 <__sflush_r+0x44>
 8002998:	6863      	ldr	r3, [r4, #4]
 800299a:	1ad2      	subs	r2, r2, r3
 800299c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800299e:	b10b      	cbz	r3, 80029a4 <__sflush_r+0x44>
 80029a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80029a2:	1ad2      	subs	r2, r2, r3
 80029a4:	2300      	movs	r3, #0
 80029a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80029a8:	6a21      	ldr	r1, [r4, #32]
 80029aa:	4628      	mov	r0, r5
 80029ac:	47b0      	blx	r6
 80029ae:	1c43      	adds	r3, r0, #1
 80029b0:	89a3      	ldrh	r3, [r4, #12]
 80029b2:	d106      	bne.n	80029c2 <__sflush_r+0x62>
 80029b4:	6829      	ldr	r1, [r5, #0]
 80029b6:	291d      	cmp	r1, #29
 80029b8:	d82b      	bhi.n	8002a12 <__sflush_r+0xb2>
 80029ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002a64 <__sflush_r+0x104>)
 80029bc:	410a      	asrs	r2, r1
 80029be:	07d6      	lsls	r6, r2, #31
 80029c0:	d427      	bmi.n	8002a12 <__sflush_r+0xb2>
 80029c2:	2200      	movs	r2, #0
 80029c4:	6062      	str	r2, [r4, #4]
 80029c6:	04d9      	lsls	r1, r3, #19
 80029c8:	6922      	ldr	r2, [r4, #16]
 80029ca:	6022      	str	r2, [r4, #0]
 80029cc:	d504      	bpl.n	80029d8 <__sflush_r+0x78>
 80029ce:	1c42      	adds	r2, r0, #1
 80029d0:	d101      	bne.n	80029d6 <__sflush_r+0x76>
 80029d2:	682b      	ldr	r3, [r5, #0]
 80029d4:	b903      	cbnz	r3, 80029d8 <__sflush_r+0x78>
 80029d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80029d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80029da:	602f      	str	r7, [r5, #0]
 80029dc:	b1b9      	cbz	r1, 8002a0e <__sflush_r+0xae>
 80029de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80029e2:	4299      	cmp	r1, r3
 80029e4:	d002      	beq.n	80029ec <__sflush_r+0x8c>
 80029e6:	4628      	mov	r0, r5
 80029e8:	f7ff fbf2 	bl	80021d0 <_free_r>
 80029ec:	2300      	movs	r3, #0
 80029ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80029f0:	e00d      	b.n	8002a0e <__sflush_r+0xae>
 80029f2:	2301      	movs	r3, #1
 80029f4:	4628      	mov	r0, r5
 80029f6:	47b0      	blx	r6
 80029f8:	4602      	mov	r2, r0
 80029fa:	1c50      	adds	r0, r2, #1
 80029fc:	d1c9      	bne.n	8002992 <__sflush_r+0x32>
 80029fe:	682b      	ldr	r3, [r5, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0c6      	beq.n	8002992 <__sflush_r+0x32>
 8002a04:	2b1d      	cmp	r3, #29
 8002a06:	d001      	beq.n	8002a0c <__sflush_r+0xac>
 8002a08:	2b16      	cmp	r3, #22
 8002a0a:	d11e      	bne.n	8002a4a <__sflush_r+0xea>
 8002a0c:	602f      	str	r7, [r5, #0]
 8002a0e:	2000      	movs	r0, #0
 8002a10:	e022      	b.n	8002a58 <__sflush_r+0xf8>
 8002a12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a16:	b21b      	sxth	r3, r3
 8002a18:	e01b      	b.n	8002a52 <__sflush_r+0xf2>
 8002a1a:	690f      	ldr	r7, [r1, #16]
 8002a1c:	2f00      	cmp	r7, #0
 8002a1e:	d0f6      	beq.n	8002a0e <__sflush_r+0xae>
 8002a20:	0793      	lsls	r3, r2, #30
 8002a22:	680e      	ldr	r6, [r1, #0]
 8002a24:	bf08      	it	eq
 8002a26:	694b      	ldreq	r3, [r1, #20]
 8002a28:	600f      	str	r7, [r1, #0]
 8002a2a:	bf18      	it	ne
 8002a2c:	2300      	movne	r3, #0
 8002a2e:	eba6 0807 	sub.w	r8, r6, r7
 8002a32:	608b      	str	r3, [r1, #8]
 8002a34:	f1b8 0f00 	cmp.w	r8, #0
 8002a38:	dde9      	ble.n	8002a0e <__sflush_r+0xae>
 8002a3a:	6a21      	ldr	r1, [r4, #32]
 8002a3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002a3e:	4643      	mov	r3, r8
 8002a40:	463a      	mov	r2, r7
 8002a42:	4628      	mov	r0, r5
 8002a44:	47b0      	blx	r6
 8002a46:	2800      	cmp	r0, #0
 8002a48:	dc08      	bgt.n	8002a5c <__sflush_r+0xfc>
 8002a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a52:	81a3      	strh	r3, [r4, #12]
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a5c:	4407      	add	r7, r0
 8002a5e:	eba8 0800 	sub.w	r8, r8, r0
 8002a62:	e7e7      	b.n	8002a34 <__sflush_r+0xd4>
 8002a64:	dfbffffe 	.word	0xdfbffffe

08002a68 <_fflush_r>:
 8002a68:	b538      	push	{r3, r4, r5, lr}
 8002a6a:	690b      	ldr	r3, [r1, #16]
 8002a6c:	4605      	mov	r5, r0
 8002a6e:	460c      	mov	r4, r1
 8002a70:	b913      	cbnz	r3, 8002a78 <_fflush_r+0x10>
 8002a72:	2500      	movs	r5, #0
 8002a74:	4628      	mov	r0, r5
 8002a76:	bd38      	pop	{r3, r4, r5, pc}
 8002a78:	b118      	cbz	r0, 8002a82 <_fflush_r+0x1a>
 8002a7a:	6a03      	ldr	r3, [r0, #32]
 8002a7c:	b90b      	cbnz	r3, 8002a82 <_fflush_r+0x1a>
 8002a7e:	f7ff fa9f 	bl	8001fc0 <__sinit>
 8002a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f3      	beq.n	8002a72 <_fflush_r+0xa>
 8002a8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002a8c:	07d0      	lsls	r0, r2, #31
 8002a8e:	d404      	bmi.n	8002a9a <_fflush_r+0x32>
 8002a90:	0599      	lsls	r1, r3, #22
 8002a92:	d402      	bmi.n	8002a9a <_fflush_r+0x32>
 8002a94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a96:	f7ff fb98 	bl	80021ca <__retarget_lock_acquire_recursive>
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	f7ff ff5f 	bl	8002960 <__sflush_r>
 8002aa2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002aa4:	07da      	lsls	r2, r3, #31
 8002aa6:	4605      	mov	r5, r0
 8002aa8:	d4e4      	bmi.n	8002a74 <_fflush_r+0xc>
 8002aaa:	89a3      	ldrh	r3, [r4, #12]
 8002aac:	059b      	lsls	r3, r3, #22
 8002aae:	d4e1      	bmi.n	8002a74 <_fflush_r+0xc>
 8002ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ab2:	f7ff fb8b 	bl	80021cc <__retarget_lock_release_recursive>
 8002ab6:	e7dd      	b.n	8002a74 <_fflush_r+0xc>

08002ab8 <__swbuf_r>:
 8002ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aba:	460e      	mov	r6, r1
 8002abc:	4614      	mov	r4, r2
 8002abe:	4605      	mov	r5, r0
 8002ac0:	b118      	cbz	r0, 8002aca <__swbuf_r+0x12>
 8002ac2:	6a03      	ldr	r3, [r0, #32]
 8002ac4:	b90b      	cbnz	r3, 8002aca <__swbuf_r+0x12>
 8002ac6:	f7ff fa7b 	bl	8001fc0 <__sinit>
 8002aca:	69a3      	ldr	r3, [r4, #24]
 8002acc:	60a3      	str	r3, [r4, #8]
 8002ace:	89a3      	ldrh	r3, [r4, #12]
 8002ad0:	071a      	lsls	r2, r3, #28
 8002ad2:	d501      	bpl.n	8002ad8 <__swbuf_r+0x20>
 8002ad4:	6923      	ldr	r3, [r4, #16]
 8002ad6:	b943      	cbnz	r3, 8002aea <__swbuf_r+0x32>
 8002ad8:	4621      	mov	r1, r4
 8002ada:	4628      	mov	r0, r5
 8002adc:	f000 f82a 	bl	8002b34 <__swsetup_r>
 8002ae0:	b118      	cbz	r0, 8002aea <__swbuf_r+0x32>
 8002ae2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002ae6:	4638      	mov	r0, r7
 8002ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	6922      	ldr	r2, [r4, #16]
 8002aee:	1a98      	subs	r0, r3, r2
 8002af0:	6963      	ldr	r3, [r4, #20]
 8002af2:	b2f6      	uxtb	r6, r6
 8002af4:	4283      	cmp	r3, r0
 8002af6:	4637      	mov	r7, r6
 8002af8:	dc05      	bgt.n	8002b06 <__swbuf_r+0x4e>
 8002afa:	4621      	mov	r1, r4
 8002afc:	4628      	mov	r0, r5
 8002afe:	f7ff ffb3 	bl	8002a68 <_fflush_r>
 8002b02:	2800      	cmp	r0, #0
 8002b04:	d1ed      	bne.n	8002ae2 <__swbuf_r+0x2a>
 8002b06:	68a3      	ldr	r3, [r4, #8]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	60a3      	str	r3, [r4, #8]
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	6022      	str	r2, [r4, #0]
 8002b12:	701e      	strb	r6, [r3, #0]
 8002b14:	6962      	ldr	r2, [r4, #20]
 8002b16:	1c43      	adds	r3, r0, #1
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d004      	beq.n	8002b26 <__swbuf_r+0x6e>
 8002b1c:	89a3      	ldrh	r3, [r4, #12]
 8002b1e:	07db      	lsls	r3, r3, #31
 8002b20:	d5e1      	bpl.n	8002ae6 <__swbuf_r+0x2e>
 8002b22:	2e0a      	cmp	r6, #10
 8002b24:	d1df      	bne.n	8002ae6 <__swbuf_r+0x2e>
 8002b26:	4621      	mov	r1, r4
 8002b28:	4628      	mov	r0, r5
 8002b2a:	f7ff ff9d 	bl	8002a68 <_fflush_r>
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	d0d9      	beq.n	8002ae6 <__swbuf_r+0x2e>
 8002b32:	e7d6      	b.n	8002ae2 <__swbuf_r+0x2a>

08002b34 <__swsetup_r>:
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	4b29      	ldr	r3, [pc, #164]	@ (8002bdc <__swsetup_r+0xa8>)
 8002b38:	4605      	mov	r5, r0
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	460c      	mov	r4, r1
 8002b3e:	b118      	cbz	r0, 8002b48 <__swsetup_r+0x14>
 8002b40:	6a03      	ldr	r3, [r0, #32]
 8002b42:	b90b      	cbnz	r3, 8002b48 <__swsetup_r+0x14>
 8002b44:	f7ff fa3c 	bl	8001fc0 <__sinit>
 8002b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b4c:	0719      	lsls	r1, r3, #28
 8002b4e:	d422      	bmi.n	8002b96 <__swsetup_r+0x62>
 8002b50:	06da      	lsls	r2, r3, #27
 8002b52:	d407      	bmi.n	8002b64 <__swsetup_r+0x30>
 8002b54:	2209      	movs	r2, #9
 8002b56:	602a      	str	r2, [r5, #0]
 8002b58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b5c:	81a3      	strh	r3, [r4, #12]
 8002b5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b62:	e033      	b.n	8002bcc <__swsetup_r+0x98>
 8002b64:	0758      	lsls	r0, r3, #29
 8002b66:	d512      	bpl.n	8002b8e <__swsetup_r+0x5a>
 8002b68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002b6a:	b141      	cbz	r1, 8002b7e <__swsetup_r+0x4a>
 8002b6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002b70:	4299      	cmp	r1, r3
 8002b72:	d002      	beq.n	8002b7a <__swsetup_r+0x46>
 8002b74:	4628      	mov	r0, r5
 8002b76:	f7ff fb2b 	bl	80021d0 <_free_r>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b7e:	89a3      	ldrh	r3, [r4, #12]
 8002b80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002b84:	81a3      	strh	r3, [r4, #12]
 8002b86:	2300      	movs	r3, #0
 8002b88:	6063      	str	r3, [r4, #4]
 8002b8a:	6923      	ldr	r3, [r4, #16]
 8002b8c:	6023      	str	r3, [r4, #0]
 8002b8e:	89a3      	ldrh	r3, [r4, #12]
 8002b90:	f043 0308 	orr.w	r3, r3, #8
 8002b94:	81a3      	strh	r3, [r4, #12]
 8002b96:	6923      	ldr	r3, [r4, #16]
 8002b98:	b94b      	cbnz	r3, 8002bae <__swsetup_r+0x7a>
 8002b9a:	89a3      	ldrh	r3, [r4, #12]
 8002b9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ba4:	d003      	beq.n	8002bae <__swsetup_r+0x7a>
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	4628      	mov	r0, r5
 8002baa:	f000 f84f 	bl	8002c4c <__smakebuf_r>
 8002bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bb2:	f013 0201 	ands.w	r2, r3, #1
 8002bb6:	d00a      	beq.n	8002bce <__swsetup_r+0x9a>
 8002bb8:	2200      	movs	r2, #0
 8002bba:	60a2      	str	r2, [r4, #8]
 8002bbc:	6962      	ldr	r2, [r4, #20]
 8002bbe:	4252      	negs	r2, r2
 8002bc0:	61a2      	str	r2, [r4, #24]
 8002bc2:	6922      	ldr	r2, [r4, #16]
 8002bc4:	b942      	cbnz	r2, 8002bd8 <__swsetup_r+0xa4>
 8002bc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002bca:	d1c5      	bne.n	8002b58 <__swsetup_r+0x24>
 8002bcc:	bd38      	pop	{r3, r4, r5, pc}
 8002bce:	0799      	lsls	r1, r3, #30
 8002bd0:	bf58      	it	pl
 8002bd2:	6962      	ldrpl	r2, [r4, #20]
 8002bd4:	60a2      	str	r2, [r4, #8]
 8002bd6:	e7f4      	b.n	8002bc2 <__swsetup_r+0x8e>
 8002bd8:	2000      	movs	r0, #0
 8002bda:	e7f7      	b.n	8002bcc <__swsetup_r+0x98>
 8002bdc:	20000018 	.word	0x20000018

08002be0 <_sbrk_r>:
 8002be0:	b538      	push	{r3, r4, r5, lr}
 8002be2:	4d06      	ldr	r5, [pc, #24]	@ (8002bfc <_sbrk_r+0x1c>)
 8002be4:	2300      	movs	r3, #0
 8002be6:	4604      	mov	r4, r0
 8002be8:	4608      	mov	r0, r1
 8002bea:	602b      	str	r3, [r5, #0]
 8002bec:	f7fd ff22 	bl	8000a34 <_sbrk>
 8002bf0:	1c43      	adds	r3, r0, #1
 8002bf2:	d102      	bne.n	8002bfa <_sbrk_r+0x1a>
 8002bf4:	682b      	ldr	r3, [r5, #0]
 8002bf6:	b103      	cbz	r3, 8002bfa <_sbrk_r+0x1a>
 8002bf8:	6023      	str	r3, [r4, #0]
 8002bfa:	bd38      	pop	{r3, r4, r5, pc}
 8002bfc:	200002a4 	.word	0x200002a4

08002c00 <__swhatbuf_r>:
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	460c      	mov	r4, r1
 8002c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c08:	2900      	cmp	r1, #0
 8002c0a:	b096      	sub	sp, #88	@ 0x58
 8002c0c:	4615      	mov	r5, r2
 8002c0e:	461e      	mov	r6, r3
 8002c10:	da0d      	bge.n	8002c2e <__swhatbuf_r+0x2e>
 8002c12:	89a3      	ldrh	r3, [r4, #12]
 8002c14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002c18:	f04f 0100 	mov.w	r1, #0
 8002c1c:	bf14      	ite	ne
 8002c1e:	2340      	movne	r3, #64	@ 0x40
 8002c20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002c24:	2000      	movs	r0, #0
 8002c26:	6031      	str	r1, [r6, #0]
 8002c28:	602b      	str	r3, [r5, #0]
 8002c2a:	b016      	add	sp, #88	@ 0x58
 8002c2c:	bd70      	pop	{r4, r5, r6, pc}
 8002c2e:	466a      	mov	r2, sp
 8002c30:	f000 f848 	bl	8002cc4 <_fstat_r>
 8002c34:	2800      	cmp	r0, #0
 8002c36:	dbec      	blt.n	8002c12 <__swhatbuf_r+0x12>
 8002c38:	9901      	ldr	r1, [sp, #4]
 8002c3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002c3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002c42:	4259      	negs	r1, r3
 8002c44:	4159      	adcs	r1, r3
 8002c46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c4a:	e7eb      	b.n	8002c24 <__swhatbuf_r+0x24>

08002c4c <__smakebuf_r>:
 8002c4c:	898b      	ldrh	r3, [r1, #12]
 8002c4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c50:	079d      	lsls	r5, r3, #30
 8002c52:	4606      	mov	r6, r0
 8002c54:	460c      	mov	r4, r1
 8002c56:	d507      	bpl.n	8002c68 <__smakebuf_r+0x1c>
 8002c58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002c5c:	6023      	str	r3, [r4, #0]
 8002c5e:	6123      	str	r3, [r4, #16]
 8002c60:	2301      	movs	r3, #1
 8002c62:	6163      	str	r3, [r4, #20]
 8002c64:	b003      	add	sp, #12
 8002c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c68:	ab01      	add	r3, sp, #4
 8002c6a:	466a      	mov	r2, sp
 8002c6c:	f7ff ffc8 	bl	8002c00 <__swhatbuf_r>
 8002c70:	9f00      	ldr	r7, [sp, #0]
 8002c72:	4605      	mov	r5, r0
 8002c74:	4639      	mov	r1, r7
 8002c76:	4630      	mov	r0, r6
 8002c78:	f7ff fb16 	bl	80022a8 <_malloc_r>
 8002c7c:	b948      	cbnz	r0, 8002c92 <__smakebuf_r+0x46>
 8002c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c82:	059a      	lsls	r2, r3, #22
 8002c84:	d4ee      	bmi.n	8002c64 <__smakebuf_r+0x18>
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	f043 0302 	orr.w	r3, r3, #2
 8002c8e:	81a3      	strh	r3, [r4, #12]
 8002c90:	e7e2      	b.n	8002c58 <__smakebuf_r+0xc>
 8002c92:	89a3      	ldrh	r3, [r4, #12]
 8002c94:	6020      	str	r0, [r4, #0]
 8002c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c9a:	81a3      	strh	r3, [r4, #12]
 8002c9c:	9b01      	ldr	r3, [sp, #4]
 8002c9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002ca2:	b15b      	cbz	r3, 8002cbc <__smakebuf_r+0x70>
 8002ca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ca8:	4630      	mov	r0, r6
 8002caa:	f000 f81d 	bl	8002ce8 <_isatty_r>
 8002cae:	b128      	cbz	r0, 8002cbc <__smakebuf_r+0x70>
 8002cb0:	89a3      	ldrh	r3, [r4, #12]
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	81a3      	strh	r3, [r4, #12]
 8002cbc:	89a3      	ldrh	r3, [r4, #12]
 8002cbe:	431d      	orrs	r5, r3
 8002cc0:	81a5      	strh	r5, [r4, #12]
 8002cc2:	e7cf      	b.n	8002c64 <__smakebuf_r+0x18>

08002cc4 <_fstat_r>:
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	4d07      	ldr	r5, [pc, #28]	@ (8002ce4 <_fstat_r+0x20>)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	4604      	mov	r4, r0
 8002ccc:	4608      	mov	r0, r1
 8002cce:	4611      	mov	r1, r2
 8002cd0:	602b      	str	r3, [r5, #0]
 8002cd2:	f7fd fea6 	bl	8000a22 <_fstat>
 8002cd6:	1c43      	adds	r3, r0, #1
 8002cd8:	d102      	bne.n	8002ce0 <_fstat_r+0x1c>
 8002cda:	682b      	ldr	r3, [r5, #0]
 8002cdc:	b103      	cbz	r3, 8002ce0 <_fstat_r+0x1c>
 8002cde:	6023      	str	r3, [r4, #0]
 8002ce0:	bd38      	pop	{r3, r4, r5, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200002a4 	.word	0x200002a4

08002ce8 <_isatty_r>:
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	4d06      	ldr	r5, [pc, #24]	@ (8002d04 <_isatty_r+0x1c>)
 8002cec:	2300      	movs	r3, #0
 8002cee:	4604      	mov	r4, r0
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	602b      	str	r3, [r5, #0]
 8002cf4:	f7fd fe9a 	bl	8000a2c <_isatty>
 8002cf8:	1c43      	adds	r3, r0, #1
 8002cfa:	d102      	bne.n	8002d02 <_isatty_r+0x1a>
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	b103      	cbz	r3, 8002d02 <_isatty_r+0x1a>
 8002d00:	6023      	str	r3, [r4, #0]
 8002d02:	bd38      	pop	{r3, r4, r5, pc}
 8002d04:	200002a4 	.word	0x200002a4

08002d08 <_init>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	bf00      	nop
 8002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0e:	bc08      	pop	{r3}
 8002d10:	469e      	mov	lr, r3
 8002d12:	4770      	bx	lr

08002d14 <_fini>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	bf00      	nop
 8002d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1a:	bc08      	pop	{r3}
 8002d1c:	469e      	mov	lr, r3
 8002d1e:	4770      	bx	lr
